<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<entry key="MDP_QUERY_USER">
		<![CDATA[
			SELECT 
			  u.user_id,
			  u.user_code,
			  u.user_name,
			  u.password 
			FROM
			  js_au_user u 
			WHERE u.user_code = ? 
			  AND u.password = ? 
			  AND u.status = 'NORMAL' 
		]]>
	</entry>

	<entry key="NISSP_CLOUD_QUERY_AREA">
		<![CDATA[
			SELECT A.ID AS AREA_ID,A.AREA_CODE,A.AREA_NAME,A.PARENT_ID,A.AREA_TYPE
			,A.AREA_CLASS,A.ADDRESS,A.REMARK   
			FROM NP_EQ_AREA A  
			WHERE A.FULL_PATH LIKE ?
		]]>
	</entry>
 
 	<entry key="NISSP_CLOUD_QUERY_CARD">
		<![CDATA[
			SELECT  C.ID AS CARD_ID,C.PHYSICAL_NO,C.CARD_NO,C.CARD_MEDIUM,C.PERSON_ID,P.PERSON_NAME,C.ISSUE_TIME
			,C.STATUS,C.CARD_DEPOSIT,C.CARD_CASH,K.NAME AS PARK_NAME,T.CAR_NO 
			FROM NP_CD_CARD C 
			INNER JOIN NP_SYS_PERSON P ON C.PERSON_ID=P.ID 
			INNER JOIN NP_EQ_AREA_R_PERSON R ON P.ID=R.PERSON_ID  
			INNER JOIN np_eq_park K ON C.SUBSYSTEM_ID=K.SUBSYSTEM_ID 
			left JOIN np_dt_park_car_r_card L ON L.CARD_ID=C.ID 
			left JOIN np_dt_park_car T ON L.CAR_ID=T.ID  WHERE P.ID=? 
		]]>
	</entry>
	
	<entry key="NISSP_CLOUD_QUERY_PERSON">
		<![CDATA[
			SELECT  P.ID AS PERSON_ID,P.PERSON_NAME,P.PERSON_TYPE,P.ADDRESS,A.ID AS AREA_ID,A.AREA_NAME,A.AREA_CLASS 
			FROM NP_SYS_PERSON P 
			INNER JOIN NP_EQ_AREA_R_PERSON R ON P.ID=R.PERSON_ID 
			INNER JOIN NP_EQ_AREA A ON R.AREA_ID=A.ID 
			WHERE P.PERSON_NAME=?  AND P.TELEPHONE=?   
		]]>
	</entry>
	
	<entry key="SQL_PARK_ALL_SUB_SYSTEM_QUERY">
		<![CDATA[
			 SELECT A.Id AS AREA_ID,S.ID AS SUB_ID,S.CODE,S.NAME,P.PRODUCT_NAME,S.PRINCIPAL_TEL,A.AREA_NAME,PK.ID AS PARK_ID
			 ,PK.CODE AS PARK_CODE,PK.NAME AS PARK_NAME
			 ,CASE WHEN PK.TOTAL_SPACE IS NULL THEN 0 ELSE PK.TOTAL_SPACE END AS TOTAL_SPACE
			 ,CASE WHEN PK.TOTAL_SPACE IS NULL THEN 0 
			 WHEN PK.IN_SPACE IS NULL THEN PK.TOTAL_SPACE
			 ELSE (PK.TOTAL_SPACE - PK.IN_SPACE) END AS IN_SPACE
			 FROM NP_CF_SUBSYSTEM S 
			 INNER JOIN  NP_CF_PRODUCT P ON S.PRODUCT_ID=P.ID 
			 INNER JOIN NP_EQ_AREA A ON S.AREA_ID=A.ID 
			 INNER JOIN NP_EQ_PARK PK ON  S.ID=PK.SUBSYSTEM_ID    
		]]>
	</entry>
 
	<entry key="SQL_PARK_SPACE_QUERY">
		<![CDATA[
			SELECT  PK.CODE AS PARK_CODE
			,CASE WHEN PK.TOTAL_SPACE IS NULL THEN 0 
			 WHEN PK.IN_SPACE IS NULL THEN PK.TOTAL_SPACE
			 ELSE (PK.TOTAL_SPACE - PK.IN_SPACE) END AS IN_SPACE
			from   NP_EQ_PARK  PK  where PK.CODE=?    
		]]>
	</entry>
	
	<entry key="SQL_PARK_CHARGE_STAND_QUERY">
		<![CDATA[
			SELECT S.STANDARD, P.CODE AS PARK_CODE 
			FROM  NP_EQ_PARK_STANDARD S 
			INNER JOIN NP_EQ_PARK P ON S.PARK_ID=P.ID  WHERE P.CODE=?    
		]]>
	</entry>
 
	<entry key="UPLOAD_UP_DATA_STATUS">
		<![CDATA[
			UPDATE NP_IM_DATA_UP_TRACK SET STATUS = '1' WHERE ID = ?    
		]]>
	</entry>
	
	<entry key="SQL_QUERY_AREA_LIST">
		<![CDATA[
			 SELECT     
                AREA.ID AS ID, 
                AREA.AREA_CODE,
                AREA.AREA_NAME,
                AREA.IS_MOVECAR,
                AREA.IS_OPENDOOR,
                AREA.IS_OPENPARK,
                AREA.STATUS,
                AREA.ADDRESS,
                AREA.PRINCIPAL_TEL AS MANAGER_TEL,
                'TRUE' AS IS_ADD,
                CASE
                   WHEN AREA.STATUS = 'NORMAL'
                   THEN 'FALSE'
                   ELSE 'TRUE'
                END DELETED,
                OFFSET_X AS LONGITUDE,
                OFFSET_Y AS LATITUDE,
                IS_OPENACCESS AS IS_AUTH_FLAG,
                IS_ENABLEAPPROVAL AS NEED_WG_APPROAL
             FROM NP_EQ_AREA AREA
             LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = AREA.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_AREA'   
          WHERE SYNC.RECORD_ID IS NULL
          AND AREA.AREA_CLASS = 'BOROUGH' 
          LIMIT 1000
		]]>
	</entry>

	<entry key="SQL_RESEND_AREA_LIST">
		<![CDATA[
			  SELECT     
                AREA.ID AS ID, 
                AREA.AREA_CODE,
                AREA.AREA_NAME,
                AREA.IS_MOVECAR,
                AREA.IS_OPENDOOR,
                AREA.IS_OPENPARK,
                AREA.STATUS,
                AREA.ADDRESS,
                AREA.PRINCIPAL_TEL AS MANAGER_TEL,
                'FALSE' IS_ADD,
                CASE
                   WHEN AREA.STATUS = 'NORMAL'
                   THEN 'FALSE'
                   ELSE 'TRUE'
                END DELETED,
                OFFSET_X AS LONGITUDE,
                OFFSET_Y AS LATITUDE,
                IS_OPENACCESS AS IS_AUTH_FLAG,
                IS_ENABLEAPPROVAL AS NEED_WG_APPROAL
             FROM MIDDLE_SYNC_COMMON_DATA SYNC 
             INNER JOIN  NP_EQ_AREA AREA ON SYNC.RECORD_ID=AREA.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_AREA'  
             AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0  
             LIMIT 1000
		]]>
	</entry>


	<entry key="SQL_RESEND_PARK_LIST">
		<![CDATA[
			 SELECT  
                PARK.ID AS ID,
                PARK.IS_LOCK AS IS_LOCK,
                PARK.STATUS AS STATUS,
                PARK.FIRST_HOUR_FEE AS FIRST_HOUR_FEE,
                PARK.CHARGE_STANDARD AS CHARGE_STANDARD,
                PARK.CODE AS PARK_CODE,
                PARK.NAME AS PARK_NAME,
                CASE
                    WHEN PARK.TOTAL_SPACE IS NULL 
                    THEN 0
                    ELSE  PARK.TOTAL_SPACE
                END AS TOTAL_SPACE,
                 CASE
                    WHEN PARK.IN_SPACE IS NULL 
                    THEN 0
                    ELSE  PARK.IN_SPACE 
                END AS IN_SPACE, 
                PARK.ADDRESS AS ADDRESS,
                PARK.LONGITUDE AS LONGITUDE,
                PARK.LATITUDE AS LATITUDE,
                AREA.ID AS AREA_ID,
                PARK.SUBSYSTEM_ID as SUBSYSTEM_ID,
                'FALSE' AS IS_ADD,
                CASE 
                    WHEN PARK.STATUS = 'NORMAL' 
                    THEN 'false'
                    ELSE 'true'
                END AS DELETED
            FROM MIDDLE_SYNC_COMMON_DATA  SYNC
            INNER JOIN NP_EQ_PARK PARK ON SYNC.RECORD_ID = PARK.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK'
            INNER JOIN NP_CF_SUBSYSTEM SUB ON PARK.SUBSYSTEM_ID = SUB.ID 
            INNER JOIN NP_EQ_AREA AREA ON SUB.AREA_ID = AREA.ID 
            WHERE (PARK.REMARK IS NULL OR PARK.REMARK <> '1')
            LIMIT 2000
		]]>
	</entry>
 	
	<entry key="SQL_QUERY_PARK_LIST">
		<![CDATA[
			SELECT  
			    PARK.ID AS ID,
			    PARK.IS_LOCK AS IS_LOCK,
			    PARK.STATUS AS STATUS,
			    PARK.FIRST_HOUR_FEE AS FIRST_HOUR_FEE,
			    PARK.CHARGE_STANDARD AS CHARGE_STANDARD,
			    PARK.CODE AS PARK_CODE,
			    PARK.NAME AS PARK_NAME,
			    CASE
                    WHEN PARK.TOTAL_SPACE IS NULL 
                    THEN 0
                    ELSE  PARK.TOTAL_SPACE
                END AS TOTAL_SPACE,
                 CASE
                    WHEN PARK.IN_SPACE IS NULL 
                    THEN 0
                    ELSE  PARK.IN_SPACE 
                END AS IN_SPACE, 
			    PARK.ADDRESS AS ADDRESS,
			    PARK.LONGITUDE AS LONGITUDE,
			    PARK.LATITUDE AS LATITUDE,
			    AREA.ID AS AREA_ID,
			    PARK.SUBSYSTEM_ID as SUBSYSTEM_ID,
			    'TRUE' AS IS_ADD,
			    CASE 
			        WHEN PARK.STATUS = 'NORMAL' 
			        THEN 'false'
			        ELSE 'true'
			    END AS DELETED
			FROM NP_EQ_PARK PARK
			INNER JOIN NP_CF_SUBSYSTEM SUB ON PARK.SUBSYSTEM_ID = SUB.ID 
			INNER JOIN NP_EQ_AREA AREA ON SUB.AREA_ID = AREA.ID
			LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = PARK.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK'   
			WHERE (PARK.REMARK IS NULL OR PARK.REMARK <> '1') AND NOT EXISTS (
					SELECT 1 FROM MIDDLE_SYNC_COMMON_DATA SYNC 
					WHERE SYNC.RECORD_ID = PARK.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK')
			LIMIT 2000
		]]>
	</entry>

	<entry key="SQL_QUERY_PARK_LIST">
		<![CDATA[
			SELECT  
			    PARK.ID AS ID,
			    PARK.IS_LOCK AS IS_LOCK,
			    PARK.ENABLED_ALIPAY AS ENABLED_ALIPAY,
			    PARK.STATUS AS STATUS,
			    PARK.FIRST_HOUR_FEE AS FIRST_HOUR_FEE,
			    PARK.CHARGE_STANDARD AS CHARGE_STANDARD,
			    PARK.CODE AS PARK_CODE,
			    PARK.NAME AS PARK_NAME,
			    CASE
                    WHEN PARK.TOTAL_SPACE IS NULL 
                    THEN 0
                    ELSE  PARK.TOTAL_SPACE
                END AS TOTAL_SPACE,
                CASE
                    WHEN PARK.ORDERSPACE IS NULL 
                    THEN 0
                    ELSE  PARK.ORDERSPACE
                END AS ORDER_TOTAL_SPACE,
			    PARK.ADDRESS AS ADDRESS,
			    PARK.LONGITUDE AS LONGITUDE,
			    PARK.LATITUDE AS LATITUDE,
			    AREA.ID AS AREA_ID,
			    PARK.SUBSYSTEM_ID as SUBSYSTEM_ID,
			    CASE 
			        WHEN PARK.STATUS = 'NORMAL' 
			        THEN 'false'
			        ELSE 'true'
			    END AS DELETED
			FROM NP_EQ_PARK PARK
			INNER JOIN NP_CF_SUBSYSTEM SUB ON PARK.SUBSYSTEM_ID = SUB.ID 
			INNER JOIN NP_EQ_AREA AREA ON SUB.AREA_ID = AREA.ID WHERE PARK.SYNC_FLAG<>1  
			LIMIT 2000
		]]>
	</entry>
	<entry key="SQL_QUERY_EQUIP_LIST">
		<![CDATA[
			SELECT  
			    EQUIP.ID AS ID,
			    EQUIP.EQUIP_CODE AS EQUIP_CODE,
			    EQUIP.EQUIP_NAME AS EQUIP_NAME,
			    EQUIP.SN AS SN,
			    EQUIP.MAC AS MAC,
			    EQUIP.IO_TYPE AS IO_TYPE,
			    CASE 
	                WHEN EQTYPE.TYPE_CODE IN ('0201','0207')
	                THEN 'PARK'
	                WHEN EQTYPE.TYPE_CODE IN ('0202','0203','0206', '0208','0209','0210')
	                THEN 'DOOR'
	                WHEN EQTYPE.TYPE_CODE ='0205'
	                THEN 'LIFT'
	                WHEN EQTYPE.TYPE_CODE='010301'
	                THEN 'VIDEO'
                END  EQUIP_TYPE,
			    EQUIP.STATUS AS STATUS,
			    EQUIP.PARK_ID AS PARK_ID,
			    AREA.ID AS AREA_ID,
			    EQUIP.SUBSYSTEM_ID AS SUBSYSTEM_ID,
			    EQUIP.EQUIP_ONLY_CODE AS UNIQUE_ID,
			    'TRUE' AS IS_ADD,
			    CASE 
			        WHEN EQUIP.STATUS = 'NORMAL' 
			        THEN 'false'
			        ELSE 'true'
			    END AS DELETED
			    ,CASE 
			    	WHEN EQUIP.COMMON_FLOOR = 1 THEN 'true'
			    	WHEN EQUIP.IS_PUBLIC = 1  THEN 'true'
			    	ELSE 'false'
			    END AS IS_COMMON,
			    CASE WHEN EQUIP.VIDEO_SUPPORTED = 1 THEN 'true' else 'false' END AS IS_SUPPORT_VIDEO,
			    CASE WHEN EQUIP.VOICE_SUPPORTED = 1 THEN 'true' else 'false' END AS IS_SUPPORT_VOICE,
			    EQUIP.VOIP_ID AS EQUIP_NAT_ID,
			    EQUIP.BLUETOOTH_MAC
			FROM NP_EQ_EQUIPMENT EQUIP
			INNER JOIN NP_EQ_EQUIPMENT_TYPE EQTYPE ON EQUIP.EQUIP_TYPE_ID = EQTYPE.ID 
			INNER JOIN NP_CF_SUBSYSTEM SUB ON EQUIP.SUBSYSTEM_ID = SUB.ID 
			INNER JOIN NP_EQ_AREA AREA ON SUB.AREA_ID = AREA.ID
			LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = EQUIP.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_EQUIPMENT'  
			WHERE SYNC.RECORD_ID IS NULL
			AND EQTYPE.TYPE_CODE IN ('0201','0202','0203','0205','010301', '0206','0207','0208', '0209', '0210')
			LIMIT 1000
		]]>
	</entry>

	<entry key="SQL_RESEND_EQUIP_LIST">
		<![CDATA[
			SELECT  
			   	EQUIP.ID AS ID,
			    EQUIP.EQUIP_CODE AS EQUIP_CODE,
			    EQUIP.EQUIP_NAME AS EQUIP_NAME,
			    EQUIP.SN AS SN,
			    EQUIP.MAC AS MAC,
			    EQUIP.IO_TYPE AS IO_TYPE,
			    CASE 
	                WHEN EQTYPE.TYPE_CODE IN ('0201','0207')
	                THEN 'PARK'
	                WHEN EQTYPE.TYPE_CODE IN ('0202','0203', '0206', '0208','0209','0210')
	                THEN 'DOOR'
	                WHEN EQTYPE.TYPE_CODE ='0205'
	                THEN 'LIFT'
	                WHEN EQTYPE.TYPE_CODE='010301'
	                THEN 'VIDEO'
                END  EQUIP_TYPE,
			    EQUIP.STATUS AS STATUS,
			    EQUIP.PARK_ID AS PARK_ID,
			    AREA.ID AS AREA_ID,
			    EQUIP.SUBSYSTEM_ID AS SUBSYSTEM_ID,
			    EQUIP.EQUIP_ONLY_CODE AS UNIQUE_ID,
			    'FALSE' AS IS_ADD,
			    CASE 
			        WHEN EQUIP.STATUS = 'NORMAL' 
			        THEN 'false'
			        ELSE 'true'
			    END AS DELETED
			    ,CASE WHEN EQUIP.COMMON_FLOOR = 1 THEN 'true'
			    WHEN EQUIP.IS_PUBLIC = 1  THEN 'true'
			    ELSE 'false' END AS IS_COMMON,
			      CASE WHEN EQUIP.VIDEO_SUPPORTED = 1 THEN 'true' else 'false' END AS IS_SUPPORT_VIDEO,
			    CASE WHEN EQUIP.VOICE_SUPPORTED = 1 THEN 'true' else 'false' END AS IS_SUPPORT_VOICE,
			    EQUIP.VOIP_ID AS EQUIP_NAT_ID,
			    BLUETOOTH_MAC
			FROM MIDDLE_SYNC_COMMON_DATA  SYNC
			INNER JOIN NP_EQ_EQUIPMENT EQUIP ON SYNC.RECORD_ID = EQUIP.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_EQUIPMENT' 
			AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0 
			INNER JOIN NP_EQ_EQUIPMENT_TYPE EQTYPE ON EQUIP.EQUIP_TYPE_ID = EQTYPE.ID 
			INNER JOIN NP_CF_SUBSYSTEM SUB ON EQUIP.SUBSYSTEM_ID = SUB.ID 
			INNER JOIN NP_EQ_AREA AREA ON SUB.AREA_ID = AREA.ID 
			WHERE EQTYPE.TYPE_CODE IN ('0201','0202','0203','0205','010301','0207','0206', '0208','0209','0210')
			LIMIT 1000
		]]>
	</entry>
	<entry key="SQL_QUERY_PERSON_LIST">
		<![CDATA[
	   SELECT  
            PERSON.ID AS ID,
            PERSON.ID AS RECORD_ID,
            PERSON.ID AS NISSP_ID,
            PERSON.PERSON_CODE AS PERSON_CODE,
            PERSON.PERSON_NAME AS PERSON_NAME,
            PERSON.CARD_NO AS IDENTITY_CODE,
            PERSON.SEX AS SEX,
            PERSON.PERSON_TYPE AS PERSON_TYPE,
            '' AS BIRTHDAY,
            PERSON.TELEPHONE AS TELEPHONE,
            PERSON.EMAIL AS EMAIL,
            PERSON.STATUS AS STATUS,
            PERSON.BOROUGH_ID AS AREA_ID,
            PERSON.BOROUGH_ID AS PARENT_ID,
            PERSON.SUB_PERSON_ID,
            PERSON.VISITER_KEY AS DYNAMIC_KEY,
            PERSON.PASS_AUTH,
            DATE_FORMAT(PERSON.INVALID_DATE,'%Y-%m-%d %H:%i:%s') AS INVALID_DATE,
            PERSON.ROOM_NO
        FROM NP_SYS_PERSON PERSON FORCE index (IX_PERSON_6)
        WHERE PERSON.SYNC_FLAG <> 1  AND PERSON.SEND_TIME < ADDTIME(NOW(),'-0:1:0') 
		AND PERSON.ORG_ID IS NULL
        AND PERSON.TELEPHONE REGEXP '^[1][0-9]{10}$'
        AND PERSON.BOROUGH_ID IS NOT NULL
        LIMIT 500
    	]]>
	</entry>
	
	<!-- 
	<entry key="SQL_QUERY_PERSON_LIST">
		<![CDATA[
	    SELECT  
            PERSON.ID AS ID,
            PERSON.ID AS RECORD_ID,
            PERSON.ID AS NISSP_ID,
            PERSON.PERSON_CODE AS PERSON_CODE,
            PERSON.PERSON_NAME AS PERSON_NAME,
            PERSON.CARD_NO AS IDENTITY_CODE,
            PERSON.SEX AS SEX,
            PERSON.PERSON_TYPE AS PERSON_TYPE,
            '' AS BIRTHDAY,
            PERSON.TELEPHONE AS TELEPHONE,
            PERSON.EMAIL AS EMAIL,
            PERSON.STATUS AS STATUS,
            PERSON.BOROUGH_ID AS AREA_ID,
            PERSON.BOROUGH_ID AS PARENT_ID,
            PERSON.SUB_PERSON_ID,
            PERSON.VISITER_KEY AS DYNAMIC_KEY,
            PERSON.PASS_AUTH,
            DATE_FORMAT(PERSON.INVALID_DATE,'%Y-%m-%d %H:%i:%s') AS INVALID_DATE,
            'TRUE' AS IS_ADD,
            CASE
               WHEN PERSON.STATUS = 'NORMAL'
               THEN 'FALSE'
               ELSE 'TRUE'
            END DELETED
        FROM NP_SYS_PERSON PERSON FORCE INDEX(IX_PERSON_6)	     
        LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC ON  SYNC.RECORD_ID = PERSON.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PERSON'
        WHERE 
        SYNC.RECORD_ID IS NULL AND PERSON.ORG_ID IS NULL 
        AND PERSON.TELEPHONE>'' AND PERSON.IS_CLERK  = 0  
        LIMIT 500
    	]]>
	</entry>
	 -->

	<entry key="SQL_RESEND_PERSON_LIST">
		<![CDATA[
		SELECT  
		PERSON.ID AS ID,
        PERSON.ID AS RECORD_ID,
        PERSON.ID AS NISSP_ID,
		PERSON.PERSON_CODE AS PERSON_CODE,
		PERSON.PERSON_NAME AS PERSON_NAME,
		PERSON.CARD_NO AS IDENTITY_CODE,
		PERSON.SEX AS SEX,
		PERSON.PERSON_TYPE AS PERSON_TYPE,
		'' AS BIRTHDAY,
		PERSON.TELEPHONE AS TELEPHONE,
		PERSON.EMAIL AS EMAIL,
		PERSON.STATUS AS STATUS,
		PERSON.BOROUGH_ID AS AREA_ID,
		PERSON.BOROUGH_ID AS PARENT_ID,  
        PERSON.SUB_PERSON_ID,
        PERSON.VISITER_KEY AS DYNAMIC_KEY,
        PERSON.PASS_AUTH,
        DATE_FORMAT(PERSON.INVALID_DATE,'%Y-%m-%d %H:%i:%s') AS INVALID_DATE,
        'FALSE' AS IS_ADD,
              CASE
                 WHEN PERSON.STATUS = 'NORMAL'
                 THEN 'FALSE'
                 ELSE 'TRUE'
              END DELETED 
      FROM MIDDLE_SYNC_COMMON_DATA SYNC
      INNER JOIN NP_SYS_PERSON PERSON ON SYNC.RECORD_ID = PERSON.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PERSON' 
      AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0
      LIMIT 500
		]]>
	</entry>
	<!-- äººåä¿¡æ¯æ¨é END -->

	<!-- å¡ä¿¡æ¯æ¨é BEGIN -->
	<!--  
	<entry key="SQL_QUERY_ECARD_LIST">
		<![CDATA[ 
		SELECT  
		    CARD.ID AS ID,
		   	CASE WHEN CARD.CARD_NO IS NULL THEN ' ' ELSE CARD.CARD_NO END AS CARD_NO,
            CASE WHEN CARD.PHYSICAL_NO IS NULL THEN ' ' ELSE CARD.PHYSICAL_NO END AS PHYSICAL_NO,
		    CARD.STATUS AS STATUS,
		    CARD.PERSON_ID AS PERSON_ID,
		    CARD.SUBSYSTEM_ID AS SUBSYSTEM_ID,
		    DATE_FORMAT(CARD.ISSUE_TIME,'%Y-%m-%d %H:%i:%s') AS ISSUE_TIME,
		    SUB.AREA_ID AS AREA_ID, 
		    'TRUE' AS IS_ADD,
            'FALSE' AS DELETED
		 FROM NP_CD_CARD CARD 
		 LEFT JOIN NP_CF_SUBSYSTEM SUB ON CARD.SUBSYSTEM_ID = SUB.ID
		 LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = CARD.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_ECARD' 
		 WHERE SYNC.RECORD_ID IS NULL
		 AND LENGTH(CARD.PERSON_ID) > 0
		 LIMIT 1000
		]]>
	</entry>
	-->
	<entry key="SQL_QUERY_ECARD_LIST">
		<![CDATA[ 
		SELECT  
		    CARD.ID AS ID,
		   	CASE WHEN CARD.CARD_NO IS NULL THEN ' ' ELSE CARD.CARD_NO END AS CARD_NO,
            CASE WHEN CARD.PHYSICAL_NO IS NULL THEN ' ' ELSE CARD.PHYSICAL_NO END AS PHYSICAL_NO,
		    CARD.STATUS AS STATUS,
		    CARD.PERSON_ID AS PERSON_ID,
		    CARD.SUBSYSTEM_ID AS SUBSYSTEM_ID,
		    DATE_FORMAT(CARD.ISSUE_TIME,'%Y-%m-%d %H:%i:%s') AS ISSUE_TIME,
		    SUB.AREA_ID AS AREA_ID
		 FROM NP_CD_CARD CARD FORCE INDEX (IX_CARD_6)
		 LEFT JOIN NP_CF_SUBSYSTEM SUB ON CARD.SUBSYSTEM_ID = SUB.ID
		 WHERE CARD.SYNC_FLAG <> 1 AND CARD.SEND_TIME < ADDTIME(NOW(),'-0:1:0') AND LENGTH(CARD.PERSON_ID) > 0 and SUB.AREA_ID is not null
		 LIMIT 500
		]]>
	</entry>
	

	<entry key="SQL_RESEND_ECARD_LIST">
		<![CDATA[
		SELECT  
		    CARD.ID AS ID,
            CASE WHEN CARD.CARD_NO IS NULL THEN ' ' ELSE CARD.CARD_NO END AS CARD_NO,
            CASE WHEN CARD.PHYSICAL_NO IS NULL THEN ' ' ELSE CARD.PHYSICAL_NO END AS PHYSICAL_NO,
		    CARD.STATUS AS STATUS,
		    CARD.PERSON_ID AS PERSON_ID,
		    CARD.SUBSYSTEM_ID AS SUBSYSTEM_ID,
		    DATE_FORMAT(CARD.ISSUE_TIME,'%Y-%m-%d %H:%i:%s') AS ISSUE_TIME,
		    SUB.AREA_ID AS AREA_ID, 
		    'FALSE' IS_ADD,
            'FALSE' AS DELETED
		 FROM MIDDLE_SYNC_COMMON_DATA SYNC
		 INNER JOIN  NP_CD_CARD CARD ON SYNC.RECORD_ID = CARD.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_ECARD' 
		  AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0
		 INNER JOIN NP_CF_SUBSYSTEM SUB ON CARD.SUBSYSTEM_ID = SUB.ID 
		 LIMIT 1000
		]]>
	</entry>
	<!-- å¡ä¿¡æ¯æ¨é END -->

	<!-- å­ç³»ç»ä¿¡æ¯æ¨é END -->
	<entry key="SQL_QUERY_SUBSYSTEM_LIST">
		<![CDATA[
			SELECT 
			     SUB.ID AS ID,
			     SUB.CODE AS SUBSYSTEM_CODE,
			     SUB.NAME AS SUBSYSTEM_NAME,
			     PRO.PRODUCT_CODE AS PRODUCT_NAME,
			     SUB.STATUS AS STATUS,
			     SUB.IS_UN_WIRE AS IS_NO_WIRING,
			     SUB.AREA_ID AS AREA_ID,
			     SUB.DELAY_MODE AS DELAY_MODE,
			     SUB.OPERATE_MODE AS OPERATE_MODE,
			     SUB.SYSTEM_KEY AS SYSTEM_KEY,
			     SUB.QRC_VERSION AS QRC_VERSION,
			     CASE
			        WHEN SYNC.RECORD_ID IS NOT NULL 
			        THEN 'FALSE'
			        ELSE 'TRUE'
			     END IS_ADD,
			     CASE
			        WHEN SUB.STATUS = 'NORMAL'
			        THEN 'FALSE'
			        ELSE 'TRUE'
			     END DELETED,
			     CTYPE.CARD_TYPE_NAME AS CARD_TYPE,
			     CASE WHEN CTYPE.CARD_TOTALITY IS NULL THEN 0 ELSE CTYPE.CARD_TOTALITY END AS CARD_TOTALITY
			FROM NP_CF_SUBSYSTEM SUB
			INNER JOIN NP_CF_PRODUCT PRO ON SUB.PRODUCT_ID = PRO.ID 
			LEFT JOIN NP_CF_SUBSYSTEM_CARD_TYPE CTYPE ON CTYPE.SUBSYSTEM_ID = SUB.ID AND CTYPE.NP_CARD_TYPE = 'MONTHCARD'
			LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = SUB.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_SUBSYSTEM'
			WHERE SYNC.RECORD_ID IS NULL 
			LIMIT 1000 
		]]>
	</entry>

	<entry key="SQL_RESEND_SUBSYSTEM_LIST">
		<![CDATA[
			SELECT 
				SUB.ID AS ID,
				SUB.CODE AS SUBSYSTEM_CODE,
				SUB.NAME AS SUBSYSTEM_NAME,
				PRO.PRODUCT_CODE AS PRODUCT_NAME,
				SUB.STATUS AS STATUS,
				SUB.IS_UN_WIRE AS IS_NO_WIRING,
				SUB.AREA_ID AS AREA_ID,
				SUB.DELAY_MODE AS DELAY_MODE,
			    SUB.OPERATE_MODE AS OPERATE_MODE,
			    SUB.QRC_VERSION AS QRC_VERSION,
			    SUB.SYSTEM_KEY,
				CASE
				   WHEN SYNC.RECORD_ID IS NOT NULL 
				   THEN 'FALSE'
				   ELSE 'TRUE'
				END IS_ADD,
				CASE
				   WHEN SUB.STATUS = 'NORMAL'
				   THEN 'FALSE'
				   ELSE 'TRUE'
				END DELETED,
				CTYPE.CARD_TYPE_NAME AS CARD_TYPE,
                CASE WHEN CTYPE.CARD_TOTALITY IS NULL THEN 0 ELSE CTYPE.CARD_TOTALITY END AS CARD_TOTALITY
			FROM  MIDDLE_SYNC_COMMON_DATA SYNC  
			INNER JOIN NP_CF_SUBSYSTEM SUB ON SYNC.RECORD_ID = SUB.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_SUBSYSTEM' 
				AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0
			INNER JOIN NP_CF_PRODUCT PRO ON SUB.PRODUCT_ID = PRO.ID 
			LEFT JOIN NP_CF_SUBSYSTEM_CARD_TYPE CTYPE ON CTYPE.SUBSYSTEM_ID = SUB.ID AND CTYPE.NP_CARD_TYPE = 'MONTHCARD'
		]]>
	</entry>
	<!-- å­ç³»ç»ä¿¡æ¯æ¨é END -->

	<!-- å¡æå¡ä¿¡æ¯æ¨é BEGIN -->
	<!--  
	<entry key="SQL_QUERY_CARD_AUTHOR_LIST">
		<![CDATA[
			SELECT
               DISTINCT AUTH.ID AS ID,
                AUTH.SERVICE_ID ,
                AUTH.CARD_TYPE AS CARD_TYPE,
                CASE WHEN AUTH.BEGIN_TIME IS NULL THEN ' '
                ELSE DATE_FORMAT(AUTH.BEGIN_TIME ,'%Y-%m-%d') END AS BEGIN_DATE,
                CASE WHEN AUTH.END_TIME IS NULL THEN ' '
                ELSE DATE_FORMAT(AUTH.END_TIME ,'%Y-%m-%d') END AS END_DATE,
                AUTH.CARD_ID AS CARD_ID,
                CASE
                   WHEN AUTH.DEL_STATUS = 1
                   THEN 'DELETED'
                   ELSE 'NORMAL'
                END AS STATUS,
                AUTH.SUBSYSTEM_ID AS SUBSYSTEM_ID,
                'TRUE' AS IS_ADD,
                CASE
                   WHEN AUTH.DEL_STATUS = '0'
                   THEN 'FALSE'
                   ELSE 'TRUE'
                END DELETED,
                  SERVICE.SERVICE_CODE AS SERVICE_TYPE,  
                TYPE.CARD_TYPE_NAME AS CARD_TYPE_NAME,
                TYPE.CARD_TYPE_CODE AS NP_CARD_TYPE,
                CAR.CAR_NO AS VEHICLE_NO
             FROM NP_CD_CARD_SUBSYSTEM_AUTHOR AUTH
             LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = AUTH.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_ECARD_SERVICE' 
             LEFT JOIN NP_CF_SERVICE SERVICE ON AUTH.SERVICE_ID = SERVICE.ID
             LEFT JOIN NP_CF_SUBSYSTEM_CARD_TYPE TYPE ON AUTH.CARD_TYPE = TYPE.ID
             LEFT JOIN NP_DT_PARK_CAR_R_CARD REL ON REL.CARD_ID = AUTH.CARD_ID
             LEFT JOIN NP_DT_PARK_CAR CAR ON REL.CAR_ID = CAR.ID
             WHERE SYNC.RECORD_ID IS NULL
             LIMIT 1000
             ]]>
	</entry>
	-->
	<entry key="SQL_QUERY_CARD_AUTHOR_LIST">
		<![CDATA[
			SELECT
               DISTINCT AUTH.ID AS ID,
                AUTH.SERVICE_ID ,
                AUTH.CARD_TYPE AS CARD_TYPE,
                CASE WHEN AUTH.BEGIN_TIME IS NULL THEN ' '
                ELSE DATE_FORMAT(AUTH.BEGIN_TIME ,'%Y-%m-%d') END AS BEGIN_DATE,
                CASE WHEN AUTH.END_TIME IS NULL THEN ' '
                ELSE DATE_FORMAT(AUTH.END_TIME ,'%Y-%m-%d') END AS END_DATE,
                AUTH.CARD_ID AS CARD_ID,
                CASE
                   WHEN AUTH.DEL_STATUS = 1
                   THEN 'DELETED'
                   ELSE 'NORMAL'
                END AS STATUS,
                AUTH.SUBSYSTEM_ID AS SUBSYSTEM_ID,
                SERVICE.SERVICE_CODE AS SERVICE_TYPE,  
                TYPE.CARD_TYPE_NAME AS CARD_TYPE_NAME,
                TYPE.CARD_TYPE_CODE AS NP_CARD_TYPE,
                CAR.CAR_NO AS VEHICLE_NO
             FROM NP_CD_CARD_SUBSYSTEM_AUTHOR AUTH
             LEFT JOIN NP_CF_SERVICE SERVICE ON AUTH.SERVICE_ID = SERVICE.ID
             LEFT JOIN NP_CF_SUBSYSTEM_CARD_TYPE TYPE ON AUTH.CARD_TYPE = TYPE.ID
             LEFT JOIN NP_DT_PARK_CAR_R_CARD REL ON REL.CARD_ID = AUTH.CARD_ID
             LEFT JOIN NP_DT_PARK_CAR CAR ON REL.CAR_ID = CAR.ID
             WHERE AUTH.SYNC_FLAG <> 1 AND AUTH.SEND_TIME < ADDTIME(NOW(),'-0:1:0') AND TYPE.CARD_TYPE_CODE IS NOT NULL
             LIMIT 500
             ]]>
	</entry>
	

	<entry key="SQL_RESEND_CARD_AUTHOR_LIST">
		<![CDATA[
			   SELECT
               DISTINCT AUTH.ID AS ID,
                AUTH.SERVICE_ID ,
                AUTH.CARD_TYPE AS CARD_TYPE,
                CASE WHEN AUTH.BEGIN_TIME IS NULL THEN ' '
                ELSE DATE_FORMAT(AUTH.BEGIN_TIME ,'%Y-%m-%d') END AS BEGIN_DATE,
                CASE WHEN AUTH.END_TIME IS NULL THEN ' '
                ELSE DATE_FORMAT(AUTH.END_TIME ,'%Y-%m-%d') END AS END_DATE,
                AUTH.CARD_ID AS CARD_ID,
                CASE
                   WHEN AUTH.DEL_STATUS = 1
                   THEN 'DELETED'
                   ELSE 'NORMAL'
                END AS STATUS,
                AUTH.SUBSYSTEM_ID AS SUBSYSTEM_ID,
                'FALSE' AS IS_ADD,
                CASE
                   WHEN AUTH.DEL_STATUS = '0'
                   THEN 'FALSE'
                   ELSE 'TRUE'
                END DELETED ,
                SERVICE.SERVICE_CODE AS SERVICE_TYPE,  
                TYPE.CARD_TYPE_NAME AS CARD_TYPE_NAME,
                TYPE.CARD_TYPE_CODE AS NP_CARD_TYPE,
                CAR.CAR_NO AS VEHICLE_NO
             FROM MIDDLE_SYNC_COMMON_DATA SYNC
             INNER JOIN NP_CD_CARD_SUBSYSTEM_AUTHOR AUTH ON SYNC.RECORD_ID = AUTH.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_ECARD_SERVICE' 
             	AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG <> 1 
             INNER JOIN NP_CF_SERVICE SERVICE ON AUTH.SERVICE_ID = SERVICE.ID
             INNER JOIN NP_CF_SUBSYSTEM_CARD_TYPE TYPE ON AUTH.CARD_TYPE = TYPE.ID            
             LEFT JOIN NP_DT_PARK_CAR_R_CARD REL ON REL.CARD_ID = AUTH.CARD_ID
             LEFT JOIN NP_DT_PARK_CAR CAR ON REL.CAR_ID = CAR.ID
         	LIMIT 1000
 		]]>
	</entry>
	<!-- å¡æå¡ä¿¡æ¯æ¨é END -->

	<!-- å¡è®¾å¤æéä¿¡æ¯æ¨é BEGIN 
	<entry key="SQL_QUERY_CARD_RLT_EQUIP_LIST">
		<![CDATA[
			SELECT   
				CARD_ID, 
                EQUIP_ID 
            FROM NP_CD_CARD_RLT_EQUIP REL
            ORDER BY CARD_ID 
		]]>
	</entry>
	
	
	<entry key="SQL_DELETED_CARD_RLT_EQUIP_LIST">
		<![CDATA[
			SELECT  
	            SYNC.RECORD_ID AS CARD_ID,
	            'DELETED' AS EQUIP_ID
            FROM MIDDLE_SYNC_COMMON_DATA SYNC 
        	WHERE NOT EXISTS (SELECT 1 FROM NP_CD_CARD_RLT_EQUIP REL WHERE SYNC.RECORD_ID = REL.CARD_ID)
        	AND SYNC.COMMAND_ID = 'NISSP_JSPAY_ECARD_PERM'
		]]>
	</entry>
	-->
	<!-- å¡è®¾å¤æéä¿¡æ¯æ¨é END -->

	<!-- æ¿å±ä¿¡æ¯æ¨é BEGIN 
			SELECT 
				SUB.ID AS AREA_ID,
                MAX(SYS_CONNECT_BY_PATH (SUB.AREA_NAME, '/')) AS HOUSE_LOCATION
             FROM NP_EQ_AREA SUB
             WHERE SUB.AREA_CLASS = 'ROOM' and SUB.ID = ?
             START WITH SUB.ID = ?
             CONNECT BY SUB.PARENT_ID= PRIOR SUB.ID 
            group by SUB.ID
	-->
	<entry key="SQL_QUERY_HOUSE_AREA_ID">
		<![CDATA[
			 SELECT * FROM NP_EQ_AREA WHERE FULL_PATH LIKE ? ORDER BY FULL_PATH
		]]>
	</entry>
		
	<entry key="SQL_QUERY_HOUSE_LIST">
		<![CDATA[
			 SELECT 
			 	SUB.ID,
			 	'TRUE'  AS IS_ADD,
			    'FALSE' AS DELETED,
			    SUB.AREA_NAME AS HOUSE_NAME, 
                SUB.AREA_NAME AS HOUSE_NO,
                SUB.AREA_CODE AS HOUSE_CODE,
                SUB.BOROUGH_ID AS AREA_ID,
                SUB.STATUS AS STATUS
             FROM NP_EQ_AREA SUB 
	         LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = SUB.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_HOUSE'
             WHERE SYNC.RECORD_ID IS NULL AND SUB.AREA_CLASS = 'ROOM' AND SUB.STATUS = 'NORMAL' limit 500
		]]>
	</entry>

	<entry key="SQL_RESEND_HOUSE_LIST">
		<![CDATA[
			 SELECT SUB.ID,
			       'FALSE' AS IS_ADD,
			       'FALSE' AS DELETED,
			       SUB.AREA_NAME AS HOUSE_NAME, 
			       SUB.AREA_NAME AS HOUSE_NO,
			       SUB.AREA_CODE AS HOUSE_CODE,
			       SUB.BOROUGH_ID AS AREA_ID,
			       SUB.STATUS AS STATUS
			  FROM MIDDLE_SYNC_COMMON_DATA SYNC
			  INNER JOIN NP_EQ_AREA SUB ON SYNC.RECORD_ID = SUB.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_HOUSE'
			  		AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0 
			   limit 500
		]]>
	</entry>
	
	<!-- äººä¸æ¿å±å³ç³»æ°å¢æ¨é -->
	<entry key="SQL_QUERY_HOUSE_R_PERSON_LIST">
		<![CDATA[
			     SELECT 
                        REL.AREA_ID AS ROOM_ID,
                        REL.PERSON_ID AS PERSON_ID,
                        REL.PERSON_TYPE AS OWNER_TYPE,
						REL.ID AS ID,
                        'TRUE'AS IS_ADD,
                        'FALSE' AS DELETED,
                        {fn CONCAT({fn CONCAT(REL.AREA_ID,'_')},REL.PERSON_ID)} as REMARK
                 FROM NP_EQ_AREA_R_PERSON REL 
				 WHERE NOT EXISTS (SELECT 1 FROM MIDDLE_SYNC_COMMON_DATA SYNC where SYNC.RECORD_ID= REL.ID and
				 SYNC.COMMAND_ID = 'NISSP_JSPAY_HOUSE_R_PERSON') AND REL.AREA_CLASS = 'ROOM' LIMIT 500 
                
		]]>
	</entry>
	
	<!-- äººä¸æ¿å±å³ç³»éæ°æ¨é ï¼æ­¤SQLæ ç¨-->
	<entry key="SQL_RESEND_HOUSE_R_PERSON_LIST">
		<![CDATA[
			    (SELECT 
				    REL.AREA_ID AS ROOM_ID,
				    REL.PERSON_ID AS PERSON_ID,
				    REL.PERSON_TYPE AS OWNER_TYPE,
				    SYNC.RECORD_ID AS ID ,
				    'FALSE' AS IS_ADD,
				    'FALSE' AS DELETED 
			 FROM MIDDLE_SYNC_COMMON_DATA SYNC 
			 INNER JOIN NP_EQ_AREA_R_PERSON REL ON  SYNC.RECORD_ID = REL.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_HOUSE_R_PERSON' 
			 AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0 
			 LIMIT 500) 
			 UNION ALL
			 (SELECT 
            {fn SUBSTRING(sync.REMARK,1,32)} AS ROOM_ID,
            {fn SUBSTRING(sync.REMARK,34)} AS PERSON_ID,
						NULL AS OWNER_TYPE,
            SYNC.RECORD_ID AS ID ,
            'FALSE' AS IS_ADD,
             'TRUE' AS DELETED 
             FROM MIDDLE_SYNC_COMMON_DATA SYNC 
						 where SYNC.COMMAND_ID = 'NISSP_JSPAY_HOUSE_R_PERSON' AND not EXISTS (select 1 from NP_EQ_AREA_R_PERSON REL WHERE SYNC.RECORD_ID = REL.ID)
							AND DELETED_FLAG = 0 and sync.remark is not NULL 
             LIMIT 500)
		]]>
	</entry>
	<!-- äººåä¸æ¿å±å³ç³»å é¤ -->
	<entry key="SQL_DELETE_HOUSE_R_PERSON_LIST">
		<![CDATA[
			  SELECT 
				{fn SUBSTRING(sync.REMARK,1,32)} AS ROOM_ID,
				{fn SUBSTRING(sync.REMARK,34)} AS PERSON_ID,  
				SYNC.RECORD_ID AS ID ,
				'FALSE'AS IS_ADD,
				'TRUE' AS DELETED
				FROM MIDDLE_SYNC_COMMON_DATA SYNC 
				WHERE SYNC.COMMAND_ID = 'NISSP_JSPAY_HOUSE_R_PERSON' AND SYNC.SYNC_FLAG = 1 and DELETED_FLAG = 0
				AND NOT EXISTS (SELECT 1 FROM NP_EQ_AREA_R_PERSON REL WHERE REL.ID = SYNC.RECORD_ID)
				ORDER BY SYNC.SEND_TIME LIMIT 1000
		]]>
	</entry>

	<!-- å¬ç¨é¨å,æå¥ä¸æ´æ°ä¸­é´è¡¨æ°æ® -->
	<entry key="SQL_SYNC_COMMON_DATA_INSERT">
		<![CDATA[
			INSERT INTO MIDDLE_SYNC_COMMON_DATA (RECORD_ID, COMMAND_ID, SYNC_FLAG, SEND_TIME, DELETED_FLAG, REMARK) VALUES(?, ?, ?, {fn NOW()}, ?, ?) 
		]]>
	</entry>
	
	<entry key="SQL_SYNC_COMMON_DATA_UPDATE_MIDDLE">
		<![CDATA[
			UPDATE MIDDLE_SYNC_COMMON_DATA SET SYNC_FLAG = 0 WHERE RECORD_ID = ? AND COMMAND_ID = ? AND SYNC_FLAG =2
		]]>
	</entry>

	<entry key="SQL_SYNC_COMMON_DATA_UPDATE">
		<![CDATA[
			UPDATE MIDDLE_SYNC_COMMON_DATA SET SYNC_FLAG = 1, DELETED_FLAG = ? WHERE RECORD_ID = ? AND COMMAND_ID = ?
		]]>
	</entry>
	<entry key="SQL_SYNC_COMMON_DATA_DELETE">
		<![CDATA[
			DELETE FROM MIDDLE_SYNC_COMMON_DATA  WHERE RECORD_ID = ? AND COMMAND_ID = 'NISSP_JSPAY_ECARD_PERM'
		]]>
	</entry>

	<!-- æ¶è´¹æ åæ¥è¯¢ -->
	<entry key="SQL_JSPAY_QUERY_CHARGE_STANDARD">
		<![CDATA[
             SELECT 
                   T.ID                AS ID,
                   T.STANDARD          AS CHARGE_STANDARD, 
                   SUB.ID AS SUBSYSTEM_ID,
                   P.ID                AS PARK_ID,
                   CASE
                        WHEN SYNC.RECORD_ID IS NULL
                        THEN 'TRUE'
                        ELSE 'FALSE'
                    END AS IS_ADD,
                    'FALSE' AS DELETED 
                   FROM NP_EQ_PARK_STANDARD T 
                   INNER JOIN NP_EQ_PARK P ON T.PARK_ID=P.ID AND  P.STATUS = 'NORMAL'
                   INNER JOIN NP_CF_SUBSYSTEM SUB ON P.SUBSYSTEM_ID = SUB.ID AND SUB.STATUS = 'NORMAL'
                   LEFT JOIN  MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = T.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK_STANDARD'
                   WHERE SYNC.RECORD_ID IS NULL
		]]>
	</entry>

	<entry key="SQL_JSPAY_RESEND_CHARGE_STANDARD">
		<![CDATA[
			    SELECT 
                   T.ID                AS ID,
                   T.STANDARD          AS CHARGE_STANDARD, 
                     SUB.ID AS SUBSYSTEM_ID,
                   P.ID                AS PARK_ID,
                   CASE
                        WHEN SYNC.RECORD_ID IS NULL
                        THEN 'TRUE'
                        ELSE 'FALSE'
                    END AS IS_ADD,
                    'FALSE' AS DELETED 
                   FROM MIDDLE_SYNC_COMMON_DATA SYNC 
                   INNER JOIN NP_EQ_PARK_STANDARD T ON SYNC.RECORD_ID = T.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK_STANDARD' 
                   AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0  
                   INNER JOIN NP_EQ_PARK P   ON T.PARK_ID=P.ID AND  P.STATUS = 'NORMAL'
                   INNER JOIN NP_CF_SUBSYSTEM SUB ON P.SUBSYSTEM_ID = SUB.ID AND SUB.STATUS = 'NORMAL'
		]]>
	</entry>

	<entry key="SQL_JSPAY_DELETED_CHARGE_STANDARD">
		<![CDATA[
			    SELECT T.ID ,SYNC.COMMAND_ID,
                       SYNC.RECORD_ID AS ID,
                       '' AS CHARGE_STANDARD,
                       '' AS PARK_ID,
                       '' AS SUBSYSTEM_ID,
                       CASE WHEN SYNC.RECORD_ID IS NULL THEN 'TRUE' ELSE 'FALSE' END
                          AS IS_ADD,
                       'TRUE' AS DELETED
                  FROM MIDDLE_SYNC_COMMON_DATA sync
                  LEFT JOIN  NP_EQ_PARK_STANDARD T ON SYNC.RECORD_ID = T.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK_STANDARD'   
                  		AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 1 
                 WHERE SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK_STANDARD'  AND T.ID IS NULL AND SYNC.DELETED_FLAG = 0 
		]]>
	</entry>

	<entry key="SQL_JSPAY_QUERY_MCARD_DEFER_STANDARD">
		<![CDATA[
			SELECT 
					MSTD.STANDARD_ID,
			        MSTD.CARD_TYPE_ID,
			        CTYPE.CARD_TYPE_NAME,
			        CTYPE.CARD_TYPE_CODE AS NP_CARD_TYPE,
			        MSTD.MONTH_PERIOD,
			        MSTD.PERIOD_MONEY
    		FROM NP_CF_SUBSYSTEM_MCARD_STANDARD MSTD
         	INNER JOIN NP_CF_SUBSYSTEM_CARD_TYPE CTYPE ON MSTD.CARD_TYPE_ID = CTYPE.ID AND CTYPE.STATUS = 'NORMAL' AND MSTD.STATUS = 'NORMAL'
			ORDER BY MSTD.STANDARD_ID, MSTD.CARD_TYPE_ID, MSTD.MONTH_PERIOD
		]]>
	</entry>

	<entry key="SQL_JSPAY_QUERY_PMNOTE">
		<![CDATA[
			SELECT 
			    NOTE.ID AS ID,
			    NOTE.SUBJECT AS SUBJECT,
			    NOTE.NOTE_TYPE AS NOTE_TYPE,
			    CASE WHEN NOTE.NOTE_TYPE = 'MANAGER_NOTIFY' AND NOTE.PM_NOTE_TYPE IS NULL THEN 'E'
                ELSE NOTE.PM_NOTE_TYPE END AS PM_NOTE_TYPE,
			    NOTE.NOTE_CONTENT AS NOTE_CONTENT,
			    NOTE.NOTE_URL AS NOTE_URL,
			    DATE_FORMAT(NOTE.PLAN_SEND_DATE,'%Y-%m-%d') AS PLAN_SEND_DATE,
			    AREA.ID AS AREA_ID,
			      CASE WHEN SYNC.RECORD_ID IS NULL THEN 'TRUE' ELSE 'FALSE' END
                          AS IS_ADD,
                'FALSE' AS DELETED
		    FROM NP_PM_NOTE NOTE 
		    INNER JOIN NP_EQ_AREA AREA ON NOTE.CONTROLUNITID = AREA.CONTROLUNITID 
		    LEFT JOIN  MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = NOTE.ID AND COMMAND_ID = 'NISSP_JSPAY_PM_NOTE'
		    WHERE AREA.AREA_CLASS='BOROUGH' AND AREA.STATUS = 'NORMAL' 
		    AND SYNC.RECORD_ID IS NULL AND NOTE.STATUS = 'CONFIRMED'
		    LIMIT 1000
		]]>
	</entry>
	
	<entry key="SQL_JSPAY_QUERY_PMNOTE_CON">
		<![CDATA[
			SELECT 
                NOTE.ID AS ID,
                NOTE.SUBJECT AS SUBJECT,
                NOTE.NOTE_TYPE AS NOTE_TYPE,
                CASE WHEN NOTE.NOTE_TYPE = 'MANAGER_NOTIFY' AND NOTE.PM_NOTE_TYPE IS NULL THEN 'E'
                ELSE NOTE.PM_NOTE_TYPE END AS PM_NOTE_TYPE,
               	
                NOTE.NOTE_CONTENT AS NOTE_CONTENT,
                NOTE.NOTE_URL AS NOTE_URL,
                DATE_FORMAT(NOTE.PLAN_SEND_DATE,'%Y-%m-%d') AS PLAN_SEND_DATE,
                '' AS AREA_ID,
                  CASE WHEN SYNC.RECORD_ID IS NULL THEN 'TRUE' ELSE 'FALSE' END
                          AS IS_ADD,
                'FALSE' AS DELETED
            FROM NP_PM_NOTE NOTE  
            LEFT JOIN  MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = NOTE.ID AND COMMAND_ID = 'NISSP_JSPAY_PM_NOTE' 
            WHERE SYNC.RECORD_ID IS NULL AND NOTE.STATUS = 'CONFIRMED'  and NOTE.CONTROLUNITID = '11111111111111111111111111111111' 
            LIMIT 1000 
		]]>
	</entry>
	
	<entry key="SQL_JSPAY_UPDATE_PMNOTE_STATUS">
		<![CDATA[
			 UPDATE NP_PM_NOTE SET STATUS = 'FINISHED' WHERE ID = ?
		]]>
	</entry>
	<entry key="SQL_JSPAY_QUERY_PMNOTE_AREA">
		<![CDATA[
			SELECT ID AS AREA_ID FROM NP_EQ_AREA AREA 
			WHERE AREA.CONTROLUNITID = '11111111111111111111111111111111' AND AREA.AREA_CLASS ='BOROUGH' AND AREA.STATUS = 'NORMAL'
		]]>
	</entry>

	<entry key="SQL_JSPAY_RESEND_PMNOTE">
		<![CDATA[
		    SELECT 
			    NOTE.ID AS ID,
			    NOTE.SUBJECT AS SUBJECT,
			    CASE WHEN NOTE.NOTE_TYPE = 'MANAGER_NOTIFY' AND NOTE.PM_NOTE_TYPE IS NULL THEN 'E'
                ELSE NOTE.PM_NOTE_TYPE END AS PM_NOTE_TYPE,
			    NOTE.NOTE_TYPE AS NOTE_TYPE,
			    NOTE.NOTE_CONTENT AS NOTE_CONTENT,
			    NOTE.NOTE_URL AS NOTE_URL,
			    DATE_FORMAT(NOTE.PLAN_SEND_DATE,'%Y-%m-%d') AS PLAN_SEND_DATE,
			    AREA.ID AS AREA_ID,
			      CASE WHEN SYNC.RECORD_ID IS NULL THEN 'TRUE' ELSE 'FALSE' END
                          AS IS_ADD,
                'FALSE' AS DELETED
		    FROM MIDDLE_SYNC_COMMON_DATA SYNC
		    INNER JOIN  NP_PM_NOTE NOTE  ON SYNC.RECORD_ID = NOTE.ID AND COMMAND_ID = 'NISSP_JSPAY_PM_NOTE' 
			AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0  
		    INNER JOIN NP_EQ_AREA AREA ON NOTE.CONTROLUNITID = AREA.CONTROLUNITID  
		    WHERE AREA.AREA_CLASS='BOROUGH' AND AREA.STATUS = 'NORMAL' 
		    LIMIT 1000
		]]>
	</entry>
	<entry key="SQL_JSPAY_RESEND_PMNOTE_CON">
		<![CDATA[
             SELECT 
                NOTE.ID AS ID,
                NOTE.SUBJECT AS SUBJECT,
                CASE WHEN NOTE.NOTE_TYPE = 'MANAGER_NOTIFY' AND NOTE.PM_NOTE_TYPE IS NULL THEN 'E'
                ELSE NOTE.PM_NOTE_TYPE END AS PM_NOTE_TYPE,
                NOTE.NOTE_TYPE AS NOTE_TYPE,
                 NOTE.NOTE_CONTENT AS NOTE_CONTENT,
                NOTE.NOTE_URL AS NOTE_URL,
                DATE_FORMAT(NOTE.PLAN_SEND_DATE,'%Y-%m-%d') AS PLAN_SEND_DATE,
                '' AS AREA_ID,
                  CASE WHEN SYNC.RECORD_ID IS NULL THEN 'TRUE' ELSE 'FALSE' END
                          AS IS_ADD,
                'FALSE' AS DELETED
            FROM MIDDLE_SYNC_COMMON_DATA SYNC
            INNER JOIN  NP_PM_NOTE NOTE  ON SYNC.RECORD_ID = NOTE.ID AND COMMAND_ID = 'NISSP_JSPAY_PM_NOTE' 
            	AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0 
            WHERE NOTE.CONTROLUNITID = '11111111111111111111111111111111'
            LIMIT 1000
		]]>
	</entry>

	<entry key="SQL_JSPAY_QUERY_DISCOUNT_POLICY">
		<![CDATA[
		   SELECT 
			    POLIC.ID AS ID,
			    POLIC.POLICY_TYPE AS POLICY_TYPE,
			    DIC.ITEM_NAME AS POLICY_NAME,
			    POLIC.DISCOUNT_VALUE AS QUOTA,
			    POLIC.PARK_ID AS PARK_ID,
			    POLIC.POLICY_SEQ_ID AS SUB_ID,
			    CASE
			        WHEN SYNC.RECORD_ID IS NULL
			        THEN 'TRUE'
			        ELSE 'FALSE'
			    END AS IS_ADD,
			     'FALSE' AS DELETED 
			FROM NP_DT_PARK_DISCOUNT_POLICY POLIC
			INNER JOIN NP_SYS_DICTIONARY DIC ON  DIC.TYPE_CODE = 'D062' AND POLIC.POLICY_TYPE = DIC.ITEM_CODE
			LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = POLIC.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK_DISCOUNT_POLICY'
			WHERE SYNC.RECORD_ID IS NULL
			LIMIT 1000
		]]>
	</entry>

	<entry key="SQL_JSPAY_RESEND_DISCOUNT_POLICY">
		<![CDATA[
			SELECT 
			    POLIC.ID AS ID,
			    POLIC.POLICY_TYPE AS POLICY_TYPE,
			    DIC.ITEM_NAME AS POLICY_NAME,
			    POLIC.DISCOUNT_VALUE AS QUOTA,
			    POLIC.PARK_ID AS PARK_ID,
			    POLIC.POLICY_SEQ_ID AS SUB_ID,
			    CASE
			        WHEN SYNC.RECORD_ID IS NULL
			        THEN 'TRUE'
			        ELSE 'FALSE'
			    END AS IS_ADD,
			    'FALSE' AS DELETED 
			FROM MIDDLE_SYNC_COMMON_DATA SYNC  
			INNER JOIN  NP_DT_PARK_DISCOUNT_POLICY POLIC ON SYNC.RECORD_ID = POLIC.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK_DISCOUNT_POLICY'  
			AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0
			INNER JOIN NP_SYS_DICTIONARY DIC ON  DIC.TYPE_CODE = 'D062' AND POLIC.POLICY_TYPE = DIC.ITEM_CODE
			LIMIT 1000
	]]>
	</entry>

	<entry key="SQL_JSPAY_DELETE_DISCOUNT_POLICY">
		<![CDATA[
			SELECT 
			    SYNC.RECORD_ID AS ID,
			    POLIC.POLICY_TYPE AS POLICY_TYPE,
			    DIC.ITEM_NAME AS POLICY_NAME,
			    POLIC.DISCOUNT_VALUE AS QUOTA,
			    POLIC.PARK_ID AS PARK_ID,
			     POLIC.POLICY_SEQ_ID AS SUB_ID,
			    CASE
			        WHEN SYNC.RECORD_ID IS NULL
			        THEN 'TRUE'
			        ELSE 'FALSE'
			    END AS IS_ADD,
			     'TRUE' AS DELETED 
			FROM MIDDLE_SYNC_COMMON_DATA SYNC  
			LEFT JOIN  NP_DT_PARK_DISCOUNT_POLICY POLIC ON POLIC.ID = SYNC.RECORD_ID AND 
				SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK_DISCOUNT_POLICY' AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 1
			LEFT JOIN NP_SYS_DICTIONARY DIC ON  DIC.TYPE_CODE = 'D062' AND POLIC.POLICY_TYPE = DIC.ITEM_CODE
			WHERE POLIC.ID IS NULL AND SYNC.COMMAND_ID = 'NISSP_JSPAY_PARK_DISCOUNT_POLICY' 
			LIMIT 1000
	]]>
	</entry>

	<entry key="SQL_JSPAY_QUERY_PARK_STORE">
		<![CDATA[
			SELECT 
			    PRO.ID AS ID,
			    PRO.NAME AS SHOP_NAME,
			    PRO.NAME AS SHOP_CODE,
			    PRO.ADDRESS AS ADDRESS,
			    PRO.PRINCIPAL AS OWNER_NAME,
			    PRO.PRINCIPAL_TEL AS TELEPHONE,
			    PARK.ID AS PARK_ID,
			    PRO.STORE_SEQ_ID AS SUB_ID,
			    CASE
			        WHEN SYNC.RECORD_ID IS NULL
			        THEN 'TRUE'
			        ELSE 'FALSE'
			    END AS IS_ADD,
			     'FALSE' AS DELETED 
			FROM NP_SYS_PROPRIETOR PRO  
			INNER JOIN NP_CF_SUBSYSTEM SUB ON SUB.CONTROLUNITID = PRO.CONTROLUNITID AND SUB.STATUS = 'NORMAL'
			INNER JOIN NP_EQ_PARK PARK ON PARK.SUBSYSTEM_ID = SUB.ID AND PARK.STATUS = 'NORMAL'
			LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC ON SYNC.RECORD_ID = PRO.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_STORE'
			WHERE SYNC.RECORD_ID IS NULL
			LIMIT 1000
		]]>
	</entry>
	<entry key="SQL_JSPAY_RESEND_PARK_STORE">
		<![CDATA[
			SELECT 
			    PRO.ID AS ID,
			    PRO.NAME AS SHOP_NAME,
			    PRO.NAME AS SHOP_CODE,
			    PRO.ADDRESS AS ADDRESS,
			    PRO.PRINCIPAL AS OWNER_NAME,
			    PRO.PRINCIPAL_TEL AS TELEPHONE,
			    PARK.ID AS PARK_ID,
			    PRO.STORE_SEQ_ID AS SUB_ID,
			    CASE
			        WHEN SYNC.RECORD_ID IS NULL
			        THEN 'TRUE'
			        ELSE 'FALSE'
			    END AS IS_ADD,
			     'FALSE' AS DELETED 
			FROM MIDDLE_SYNC_COMMON_DATA  SYNC
			INNER JOIN NP_SYS_PROPRIETOR PRO  ON SYNC.RECORD_ID = PRO.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_STORE' 
				AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND SYNC.SYNC_FLAG = 0  
			INNER JOIN NP_CF_SUBSYSTEM SUB ON SUB.CONTROLUNITID = PRO.CONTROLUNITID AND SUB.STATUS = 'NORMAL'
			INNER JOIN NP_EQ_PARK PARK ON PARK.SUBSYSTEM_ID = SUB.ID AND PARK.STATUS = 'NORMAL' 
			LIMIT 1000
		]]>
	</entry>
	<entry key="SQL_JSPAY_DELETE_PARK_STORE">
		<![CDATA[
			SELECT 
                SYNC.RECORD_ID AS ID,
                PRO.NAME AS SHOP_NAME,
                PRO.NAME AS SHOP_CODE,
                PRO.ADDRESS AS ADDRESS,
                PRO.PRINCIPAL AS OWNER_NAME,
                PRO.PRINCIPAL_TEL AS TELEPHONE,
                PARK.ID AS PARK_ID,
                PRO.STORE_SEQ_ID AS SUB_ID,
                CASE
                    WHEN SYNC.RECORD_ID IS NULL
                    THEN 'TRUE'
                    ELSE 'FALSE'
                END AS IS_ADD,
                 'TRUE' AS DELETED 
            FROM MIDDLE_SYNC_COMMON_DATA  SYNC
            LEFT JOIN NP_SYS_PROPRIETOR PRO  ON SYNC.RECORD_ID = PRO.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_STORE' 
            	AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:10:0') AND  SYNC.SYNC_FLAG = 1 
            LEFT JOIN NP_CF_SUBSYSTEM SUB ON SUB.CONTROLUNITID = PRO.CONTROLUNITID AND SUB.STATUS = 'NORMAL'
            LEFT JOIN NP_EQ_PARK PARK ON PARK.SUBSYSTEM_ID = SUB.ID AND PARK.STATUS = 'NORMAL' 
            WHERE SYNC.COMMAND_ID = 'NISSP_JSPAY_STORE'  AND  SYNC.SYNC_FLAG = 1 AND PRO.ID IS NULL  
            LIMIT 1000
		]]>
	</entry>

	<entry key="SQL_JSPAY_QUERY_DOWN_DATA">
		<![CDATA[
	       SELECT 
	            ID AS NISSP_ID,
	            DOWN_TYPE AS COMMAND_ID,
	            DOWN_CONTENT AS CONTENT, 
	            STATUS AS STATUS,
	            LOG AS LOG,
	            SYNC_TIME AS SYNC_TIME  
	      FROM NP_IM_DATA_DOWN_TRACK WHERE STATUS = '0' ORDER BY SYNC_TIME
	       LIMIT 500
		]]>
	</entry>
	<entry key="SQL_JSPAY_QUERY_UP_DATA">
		<![CDATA[
			SELECT 
				 	ID AS NISSP_ID,
				    UP_TYPE AS COMMAND_ID,
				    UP_CONTENT AS CONTENT, 
				    STATUS AS STATUS,
				    LOG AS LOG,
				    SYNC_TIME AS SYNC_TIME
	 		FROM NP_IM_DATA_UP_TRACK WHERE STATUS='0' ORDER BY SYNC_TIME 
	 		LIMIT 500
		]]>
	</entry>
	<entry key="UPDATE_DOWN_DATA_TIME">
		<![CDATA[
			 UPDATE NP_IM_DATA_DOWN_TRACK SET SYNC_TIME = {fn NOW()} WHERE ID = ?
		]]>
	</entry>

	<entry key="UPDATE_UP_DATA_TIME">
		<![CDATA[
			 UPDATE NP_IM_DATA_UP_TRACK SET SYNC_TIME = {fn NOW()} WHERE ID = ?
		]]>
	</entry>

	<entry key="INSERT_DOWN_DATA">
		<![CDATA[
			INSERT INTO NP_IM_DATA_DOWN_TRACK ( ID, DOWN_TYPE, DOWN_CONTENT, STATUS, LOG, SYNC_TIME) VALUES (?, ?, ?, ?, ?, ?)
		]]>
	</entry>
	
	<entry key="INSERT_DOWN_DATA_ALL">
		<![CDATA[
			INSERT INTO NP_IM_DATA_DOWN_TRACK ( ID, DOWN_TYPE, DOWN_CONTENT, STATUS, LOG, SYNC_TIME,CARD_ID) VALUES (?, ?, ?, ?, ?, ?,?)
		]]>
	</entry>

	<entry key="UPDATE_DOWN_DATA">
		<![CDATA[
			UPDATE NP_IM_DATA_DOWN_TRACK SET STATUS = '1' WHERE ID = ?
		]]>
	</entry>
	
	<entry key="UPDATE_UP_DATA">
		<![CDATA[
			UPDATE NP_IM_DATA_UP_TRACK SET STATUS = '1' WHERE ID = ?
		]]>
	</entry>

	<entry key="INSERT_UP_DATA">
		<![CDATA[
			INSERT INTO NP_IM_DATA_UP_TRACK ( ID, UP_TYPE, UP_CONTENT, STATUS, LOG, SYNC_TIME) VALUES (?, ?, ?, ?, ?, ?)
		]]>
	</entry>

	<entry key="SQL_QUERY_SUBYSY_INFO_BY_CARD">
		<![CDATA[
			SELECT SUB.CODE AS SUBCODE FROM NP_CF_SUBSYSTEM SUB 
				INNER JOIN NP_CD_CARD CARD ON CARD.SUBSYSTEM_ID = SUB.ID AND SUB.STATUS = 'NORMAL'
			WHERE CARD.ID = ?
		]]>
	</entry>

	<entry key="SQL_QUERY_HYDROECECTRIC_AREA_INFO_SQL">
		<![CDATA[
			SELECT  AREA.AREA_NAME AS VILLAGE_NAME, AREA.CONTROLUNITID AS CONTROLUNITID  
			FROM NP_EQ_AREA AREA WHERE AREA.ID = ?
		]]>
	</entry>

	<entry key="SQL_QUERY_HYDROECECTRIC_INFO_SQL">
		<![CDATA[
			SELECT 
		       COMMUNITY_NAME AS VILLAGE_NAME,
		       ROOM_NO        AS ROOM_CODE,
		       BANK_NAME      AS DEPOLIT_BANK,
		       B.BANK_ACCOUNT   AS ACCOUNT_NUMBER,
		       B.BANK_ACCOUNT_NAME AS CLIENT_NAME,
		       DIC.ITEM_NAME    AS ITEM_NAME,
		       DIC.ITEM_CODE AS ITEM_CODE,
		       BIZ_QUANTITY   AS BIZ_QUANTITY,
		       UNIT_PRICE     AS UNIT_PRICE,
		       AMOUNT         AS AMOUNT,
		       OCCUR_MONTH    AS OCCUR_MONTH,
		       C.NAME         AS CONTROLUNIT_NAME
		    FROM NP_PM_AP_ITEM ITEM
		    INNER JOIN NP_SYS_DICTIONARY DIC ON DIC.TYPE_CODE = 'D075' AND  RTRIM(ITEM.FEE_ITEM_CODE) = DIC.ITEM_CODE 
		    INNER JOIN NP_PM_BANK_ACCOUNT B ON B.BANK_ACCOUNT= ITEM.BANK_ACCOUNT AND B.BIND_PROPERTY=ITEM.ROOM_NO
		    INNER JOIN NP_EQ_AREA A ON  A.AREA_CLASS = 'ROOM' AND  A.AREA_NAME = ITEM.ROOM_NO
		    INNER JOIN NP_EQ_AREA_R_PERSON ON A.ID =NP_EQ_AREA_R_PERSON.AREA_ID  
		    INNER JOIN NP_SYS_CONTROLUNIT C ON C.ID=A.CONTROLUNITID                              
		    INNER JOIN NP_SYS_PERSON ON NP_SYS_PERSON.ID =NP_EQ_AREA_R_PERSON.PERSON_ID 
		   	WHERE A.CONTROLUNITID = ?   AND   A.AREA_NAME = ?  AND NP_EQ_AREA_R_PERSON.PERSON_ID = ?   
		   	AND ITEM.OCCUR_MONTH = ? 
		]]>
	</entry>

	<entry key="SQL_PERSON_DATA_INSERT">
		<![CDATA[
 			INSERT INTO NP_SYS_PERSON(ID, PERSON_CODE, PERSON_NAME, IS_CLERK, SEX, TELEPHONE, STATUS, CONTROLUNITID, IS_EDIT,PERSON_TYPE)  
			 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
		]]>
	</entry>
	
	<entry key="SQL_QUERY_ECARD_EXPIRE">
		<![CDATA[
 			SELECT T.ID AS REQUEST_ID,
                   C.ID AS CARD_ID,
                   C.CARD_NO AS CARD_NO,
                   C.PHYSICAL_NO AS PHYSICAL_NO,
                   DATE_FORMAT(T.END_TIME,'%Y-%m-%d %H:%i:%s') AS END_DATE,
                   DATEDIFF(T.END_TIME,NOW()) AS D_DAY,
                   DATE_FORMAT(DATE_ADD(T.END_TIME,INTERVAL 10 DAY),'%Y-%m-%d') AS TEMP_DATE,
                   P.ID AS PERSON_ID,
                   P.PERSON_NAME AS PERSON_NAME,
                   SUB.AREA_ID AS AREA_ID
              FROM NP_CD_CARD_SUBSYSTEM_AUTHOR T
              INNER JOIN NP_CD_CARD C ON T.CARD_ID = C.ID AND C.STATUS='NORMAL'
              INNER JOIN NP_SYS_PERSON P ON C.PERSON_ID=P.ID
              INNER JOIN NP_CF_SUBSYSTEM SUB ON SUB.ID = C.SUBSYSTEM_ID
              INNER JOIN NP_CF_SERVICE S ON T.SERVICE_ID=S.ID AND S.SERVICE_CODE='PARK'
              WHERE T.END_TIME = DATE_FORMAT(ADDDATE(NOW(),-?),'%Y-%m-%d') AND
              NOT EXISTS (
			   SELECT 1
		  	FROM NP_IM_DATA_UP_TRACK track
		  	WHERE track.UP_TYPE = 'NISSP_JSPAY_CARD_READY_TERM' AND track.CARD_ID=T.CARD_ID)
		]]>
	</entry>
	

	<!-- æ¥è¯¢éè¦æ¨éçæå¡å»¶æä¿¡æ¯ -->
	<entry key="SQL_EXPIRE_ECARDS_FOR_NOTICE">
		<![CDATA[
			SELECT T.ID AS REQUEST_ID,
                   C.ID AS CARD_ID,
                   C.CARD_NO AS CARD_NO,
                   C.PHYSICAL_NO AS PHYSICAL_NO,
                   DATE_FORMAT(T.END_TIME,'%Y-%m-%d %H:%i:%s') AS END_DATE,
                   DATEDIFF(T.END_TIME,NOW()) AS D_DAY,
                   DATE_FORMAT(DATE_ADD(T.END_TIME,INTERVAL 10 DAY),'%Y-%m-%d') AS TEMP_DATE,
                   P.ID AS PERSON_ID,
                   P.PERSON_NAME AS PERSON_NAME,
                   SUB.AREA_ID AS AREA_ID
              FROM NP_CD_CARD_SUBSYSTEM_AUTHOR T
              INNER JOIN NP_CD_CARD C ON T.CARD_ID = C.ID AND C.STATUS='NORMAL'
              INNER JOIN NP_SYS_PERSON P ON C.PERSON_ID=P.ID
              INNER JOIN NP_CF_SUBSYSTEM SUB ON SUB.ID = C.SUBSYSTEM_ID
              INNER JOIN NP_CF_SERVICE S ON T.SERVICE_ID=S.ID AND S.SERVICE_CODE='PARK'
              WHERE T.END_TIME = DATE_FORMAT(ADDDATE(NOW(),-?),'%Y-%m-%d') AND
              EXISTS (
			   SELECT 1
		  	FROM NP_IM_DATA_UP_TRACK track
		  	WHERE track.UP_TYPE = 'NISSP_JSPAY_CARD_READY_TERM' AND track.SYNC_TIME<CURDATE() AND track.CARD_ID=T.CARD_ID)
		]]>
	</entry>

	<entry key="SQL_INSERT_REPAIRE_BILL_INFO">
		<![CDATA[
 			 INSERT INTO NP_PM_REPAIRE_BILL 
 			 (ID, REP_SUBJECT, REP_TYPE, REP_LEVEL, REPORTER_ID, REPORT_TIME, REP_DESC, STATUS, CONTROLUNITID, CREATE_TIME) 
			 VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
		]]>
	</entry>

	<entry key="SQL_QUERY_CU_BY_PERSON">
		<![CDATA[
 			 SELECT P.CONTROLUNITID FROM NP_SYS_PERSON P WHERE P.STATUS = 'NORMAL' AND P.ID = ?
		]]>
	</entry>
	<entry key="SQL_SELECT_CARNO">
		<![CDATA[
 			SELECT APP.ID FROM NP_PM_APPLICATION APP WHERE APP.APPLICATION_CONTENT like ?  
		]]>
	</entry>
	<entry key="SQL_SELECT_MONTH_APPCARD">
		<![CDATA[
 			 SELECT * FROM NP_PM_APPLICATION APP
			WHERE APP.APPROVAL_STATUS='WF-APPROVING' 
			and APP.APPLICATION_CONTENT like '%OPEN_CARD_MONTH%' 
			and APP.APPLICATION_CONTENT like ? 
			and app.application_time > ?
		]]>
	</entry>
	<entry key="SQL_INSERT_USER_APPLY_INFO">
		<![CDATA[
 			 INSERT INTO NP_PM_APPLICATION 
 			 	(
   				ID, 
   				APPLICATION_NO, 
   				APPLICATION_TYPE, 
   				APPLICATION_SUBJECT, 
   				APPLICANT, 
   				APPLICATION_TIME, 
   				APPLICATION_CONTENT,  
    			STATUS,  
    			CREATE_TIME, 
    			CONTROLUNITID) 
			VALUES (  ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
		]]>
	</entry>

	<entry key="SQL_INSERT_UP_TRACK_INFO">
		<![CDATA[
 			 INSERT INTO NP_IM_DATA_UP_TRACK 
 			 	(
   				ID, 
   				UP_TYPE, 
   				UP_CONTENT, 
   				STATUS, 
   				LOG, 
   				SYNC_TIME,  
    			CREATE_TIME,
    			CARD_ID ) 
			VALUES (  ?, ?, ?, ?, ?, {fn NOW()}, {fn NOW()} ,? )
		]]>
	</entry>

	<entry key="SQL_UPDATE_UP_TRACK_INFO">
		<![CDATA[
 			UPDATE NP_IM_DATA_UP_TRACK SET UP_CONTENT = ?, STATUS = ?, SYNC_TIME = {fn NOW()} WHERE ID = ?
		]]>
	</entry>
	
	<entry key="SQL_EQUIP_OPERATE_QUERY_PERSON_INFO">
		<![CDATA[
 			SELECT PERSON_NAME FROM NP_SYS_PERSON WHERE STATUS = 'NORMAL' AND ID = ?
		]]>
	</entry>
	<entry key="SQL_EQUIP_OPERATE_QUERY_CARD_INFO">
		<![CDATA[
 			SELECT C.PHYSICAL_NO AS PHYSICAL_NO FROM NP_CD_CARD C WHERE STATUS = 'NORMAL' AND ID = ?
		]]>
	</entry>
	<entry key="SQL_EQUIP_OPERATE_QUERY_EQUIP_INFO">
		<![CDATA[
 			SELECT EQUIP.ID AS EQUIP_ID, EQUIP.EQUIP_CODE AS EQUIP_CODE,  EQUIP.EQUIP_NAME, SUB.CODE AS SUBSYSTEM_CODE,VERSION
 			FROM NP_EQ_EQUIPMENT EQUIP
			INNER JOIN NP_CF_SUBSYSTEM  SUB ON EQUIP.SUBSYSTEM_ID = SUB.ID 
			WHERE EQUIP.STATUS = 'NORMAL'  AND EQUIP.ID = ?
		]]>
	</entry>
	
	<entry key="SQL_QUERY_EXISTS_TABLE_INFO">
		<![CDATA[
 			SELECT  COUNT(*) AS CNT FROM information_schema.TABLES 
 			WHERE TABLE_NAME = 'MIDDLE_SYNC_COMMON_DATA'
		]]>
	</entry>
	
	<entry key="SQL_UPDATE_EXISTS_RECORD_INFO">
		<![CDATA[
 			UPDATE MIDDLE_SYNC_COMMON_DATA SET SYNC_FLAG = 0 WHERE RECORD_ID = ? AND COMMAND_ID = ? 
		]]>
	</entry>
	<entry key="SQL_QUERY_EXISTS_ETICKET_INFO">
		<![CDATA[
 			SELECT 
 				TICKET.TICKET_NO AS TICKET_NO, 
 				DATE_FORMAT(TICKET.IN_TIME,'%Y-%m-%d %H:%i:%s') AS CHECK_IN_TIME, 
 				TICKET.DEVICE AS DEVICE
 			FROM NP_ETICKET_CHECKIN TICKET
 			INNER JOIN NP_CF_SUBSYSTEM SUB ON SUB.ID = TICKET.SUBSYSTEM_ID AND SUB.STATUS = 'NORMAL'
 			WHERE TICKET.TICKET_NO IN (?)
		]]>
	</entry>
	
	<entry key = "SQL_APP_FUNC_INFO_DELETE">
		<![CDATA[
			DELETE FROM NP_AU_POPEDOM WHERE ID = ?
		]]>
	</entry>
	
	<entry key = "SQL_APP_FUNC_INFO_INSERT">
		<![CDATA[
			INSERT INTO NP_AU_POPEDOM(ID,POPEDOM_CODE,POPEDOM_NAME,POPEDOM_TYPE,GRADE) 
			values(?,?,?,?,3)
		]]>
	</entry>
	
	<entry key = "SQL_BILL_STATUS_UPDATE">
		<![CDATA[
			UPDATE NP_PM_JOB_BILL SET AREA_ID = ?,STATUS= ?,CONTENT= ? WHERE ID = ? 
		]]>
	</entry>
	
	<entry key = "SQL_REPORT_INFO_DELETE">
		<![CDATA[
			DELETE FROM NP_PM_REPORT_BILL WHERE ID = ?
		]]>
	</entry>
	
	<entry key = "SQL_REPORT_PIC_DELETE">
		<![CDATA[
			DELETE FROM NP_SA_ANNEX WHERE REF_ID = ? AND REF_FROM = 'PM_REPORT_BILL'
		]]>
	</entry>
	
	<entry key = "SQL_REPORT_INFO_INSERT">
		<![CDATA[
			INSERT INTO NP_PM_REPORT_BILL(ID,REPORTER_ID,AREA_ID,REP_TYPE,REP_DESC
			,STATUS,REP_NO,BOOKING_TIME,CREATOR,CREATE_TIME,REP_TIME)
			VALUES(?,?,?,?,?,?,?,?,?,{fn NOW()},{fn NOW()})
		]]>
	</entry>
	<entry key = "SQL_SA_ANNEX_INSERT">
		<![CDATA[
			INSERT INTO NP_SA_ANNEX(ID,REF_ID,REF_FROM,FILE_PATH,FILE_TYPE
			,CREATE_TIME)VALUES(?,?,?,?,?,{fn NOW()})
		]]>
	</entry>
	<entry key = "SQL_REPORT_TASK_INSERT">
		<![CDATA[
			INSERT INTO NP_PM_REPORT_TASK(ID,TASK_NO,REPORT_ID,ASSIGNER_ID,WORKER_ID,TASK_REQ
			,CREATE_TIME,STATUS,RECEIVE_TIME)VALUES(?,?,?,?,?,?,{fn NOW()},'RECEIPT',{fn NOW()})
		]]>
	</entry>
	<entry key = "SQL_REPORT_STATUS_UPDATE">
		<![CDATA[
			UPDATE NP_PM_REPORT_BILL SET STATUS = ? WHERE ID = ?
		]]>
	</entry>
	<entry key = "SQL_REPORT_STATUS_UPDATE_BY_TASK_ID">
		<![CDATA[
			UPDATE NP_PM_REPORT_BILL BILL SET BILL.STATUS = ?
			,BILL.HANDLE_RESULT = ?
            WHERE EXISTS(SELECT * FROM NP_PM_REPORT_TASK TASK 
               WHERE BILL.ID = TASK.REPORT_ID AND TASK.ID = ?)
		]]>
	</entry>
	<entry key = "SQL_REPORT_TASK_FINISH">
		<![CDATA[
			UPDATE NP_PM_REPORT_TASK SET STATUS = 'COMPLETE',TASK_MSG = ?,FINISH_TIME = {fn NOW()} WHERE ID = ?
		]]>
	</entry>
	<entry key = "SQL_REPORT_PROCESS_APPRAISE">
		<![CDATA[
			UPDATE NP_PM_REPORT_BILL SET STATUS = 'COMPLETED',FEEDBACK= ?,SATISFY_LEVEL = ?,FEEDBACK_TIME = {fn NOW()} WHERE ID = ?
		]]>
	</entry>
	<entry key = "SQL_QUERY_REPORT_LIST">
		<![CDATA[
			select V.*,ANNEX.FILE_PATH from (
				select ID as RECORD_ID,REP_NO AS REPORT_CODE 
				,AREA_ID,CASE WHEN STATUS = 'WF-HANDLING' THEN 0
				WHEN STATUS = 'HANDLING' THEN 1 WHEN STATUS = 'WF_FEEDBACK' THEN 2 WHEN STATUS = 'COMPLETED' THEN 3
				ELSE -1 END AS STATUS,REP_TYPE AS TYPE_CODE
				,REP_DESC AS CONTENT
				,DATE_FORMAT(CREATE_TIME,'%Y-%m-%d %H:%i:%s') as CREATE_TIME
				,CASE WHEN D_CREATE_TIME IS NOT NULL 
		        THEN CONCAT(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60*60*24)),CONVERT('å¤©' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60*60)),24),CONVERT('æ¶' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60)),60),CONVERT('å' USING utf8))
				ELSE CONCAT(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60*60*24)),CONVERT('å¤©' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60*60)),24),CONVERT('æ¶' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60)),60),CONVERT('å' USING utf8))
				END AS TIME_LONG
				,SOURCE
				from (
					select a.ID,a.REP_NO,a.AREA_ID,a.STATUS,a.REP_TYPE,a.REP_DESC,a.CREATE_TIME
					,b.D_CREATE_TIME,c.ASSIGNER_ID,case when d.person_id is not null then 'JWG' else 'JSH' end as SOURCE  
					from np_pm_report_bill a
					left join (select report_id,max(create_time) as d_create_time from np_pm_report_task group by report_id) b 
					on a.id = b.report_id
					left join np_pm_report_task c on b.report_id = c.report_id and b.d_create_time = c.create_time
					left join (select distinct person_id from np_pm_app_user) d on a.reporter_id = d.person_id
					where ('ALL' = ? OR a.REPORTER_ID = ? )
					AND a.AREA_ID = ?
					AND (('ALL' = ? OR a.REP_TYPE = ?) OR ('OTHERS' = ? AND a.REP_TYPE NOT IN ('REPAIR','PATROL','ADVISE')))
					AND ('ALL' = ? OR a.status = ?)
					AND (0 = ? OR a.STATUS != 'WF-HANDLING')
					AND (0 = ? OR (a.create_time >= ? and a.create_time <= ?))
					AND (0 = ? OR a.CREATE_TIME <= ?)
					AND (0 = ? OR exists(select * from np_pm_report_task task 
						join(select report_id,max(create_time) as create_time from np_pm_report_task group by report_id) t 
						on task.report_id = t.report_id and task.create_time = t.create_time
						where task.report_id = a.id and task.worker_id = ? and (task.status <> 'FINISH' OR 
						(task.status = 'FINISH' and not exists(select * from np_pm_report_task_event_log elog where elog.task_id = task.id and (elog.event = 'REJECT' or elog.event = 'COMPLAIN'))))
					))
					order by create_time desc ) m where ('ALL' = ? OR ( m.status = 'WF-HANDLING' OR m.assigner_id = ? )) 
				limit ?,? ) V
			left join NP_SA_ANNEX ANNEX ON V.RECORD_ID = ANNEX.REF_ID AND ANNEX.REF_FROM = 'PM_REPORT_BILL'
		]]>
	</entry>
	<entry key = "queryreportlist">
		<![CDATA[
			 SELECT V.*,ANNEX.FILE_PATH FROM (
				SELECT ID AS RECORD_ID,REP_NO AS REPORT_CODE 
				,AREA_ID,CASE WHEN STATUS = 'WF-HANDLING' THEN 0
				WHEN STATUS = 'HANDLING' THEN 1 WHEN STATUS = 'WF_FEEDBACK' THEN 2 WHEN STATUS = 'COMPLETED' THEN 3
				ELSE -1 END AS STATUS,REP_TYPE AS TYPE_CODE
				,REP_DESC AS CONTENT
				,DATE_FORMAT(CREATE_TIME,'%Y-%m-%d %H:%i:%s') AS CREATE_TIME
				,CASE WHEN D_CREATE_TIME IS NOT NULL 
		        THEN CONCAT(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60*60*24)),CONVERT('å¤©' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60*60)),24),CONVERT('æ¶' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60)),60),CONVERT('å' USING utf8))
				ELSE CONCAT(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60*60*24)),CONVERT('å¤©' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60*60)),24),CONVERT('æ¶' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60)),60),CONVERT('å' USING utf8))
				END AS TIME_LONG
				,SOURCE
				FROM (
					SELECT a.ID,a.REP_NO,a.AREA_ID,a.STATUS,a.REP_TYPE,a.REP_DESC,a.CREATE_TIME
					,b.D_CREATE_TIME,c.ASSIGNER_ID,CASE WHEN d.person_id IS NOT NULL THEN 'JWG' ELSE 'JSH' END AS SOURCE  
					FROM np_pm_report_bill a
					LEFT JOIN (SELECT report_id,MAX(create_time) AS d_create_time FROM np_pm_report_task GROUP BY report_id) b 
					ON a.id = b.report_id
					LEFT JOIN np_pm_report_task c ON b.report_id = c.report_id AND b.d_create_time = c.create_time
					LEFT JOIN (SELECT DISTINCT person_id FROM np_pm_app_user) d ON a.reporter_id = d.person_id
					WHERE a.AREA_ID = ? $repUID    $REP_TYPE   $STATUS   $TIME 
				         ORDER BY create_time DESC ) m  
				LIMIT ?,? ) V
			LEFT JOIN NP_SA_ANNEX ANNEX ON V.RECORD_ID = ANNEX.REF_ID AND ANNEX.REF_FROM = 'PM_REPORT_BILL'
		]]>
	</entry>
	
	
	<entry key = "queryreportlistbydispatch">
		<![CDATA[
			SELECT V.*,ANNEX.FILE_PATH FROM (
				SELECT ID AS RECORD_ID,REP_NO AS REPORT_CODE 
				,AREA_ID,CASE WHEN STATUS = 'WF-HANDLING' THEN 0
				WHEN STATUS = 'HANDLING' THEN 1 WHEN STATUS = 'WF_FEEDBACK' THEN 2 WHEN STATUS = 'COMPLETED' THEN 3
				ELSE -1 END AS STATUS,REP_TYPE AS TYPE_CODE
				,REP_DESC AS CONTENT
				,DATE_FORMAT(CREATE_TIME,'%Y-%m-%d %H:%i:%s') AS CREATE_TIME
				,CASE WHEN D_CREATE_TIME IS NOT NULL 
		        THEN CONCAT(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60*60*24)),CONVERT('å¤©' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60*60)),24),CONVERT('æ¶' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60)),60),CONVERT('å' USING utf8))
				ELSE CONCAT(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60*60*24)),CONVERT('å¤©' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60*60)),24),CONVERT('æ¶' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60)),60),CONVERT('å' USING utf8))
				END AS TIME_LONG
				,SOURCE,DISPATCH_PERSON_CODE
				FROM (
					SELECT a.ID,a.REP_NO,a.AREA_ID,a.STATUS,a.REP_TYPE,a.REP_DESC,a.CREATE_TIME
					,b.D_CREATE_TIME,c.ASSIGNER_ID,CASE WHEN d.person_id IS NOT NULL THEN 'JWG' ELSE 'JSH' END AS SOURCE,PERSON.PERSON_CODE AS DISPATCH_PERSON_CODE  
					FROM np_pm_report_bill a
					LEFT JOIN (SELECT report_id,MAX(create_time) AS d_create_time FROM np_pm_report_task GROUP BY report_id) b 
					ON a.id = b.report_id
					LEFT JOIN np_pm_report_task c ON b.report_id = c.report_id AND b.d_create_time = c.create_time
					LEFT JOIN NP_SYS_PERSON PERSON ON c.ASSIGNER_ID = PERSON.ID
					LEFT JOIN (SELECT DISTINCT person_id FROM np_pm_app_user) d ON a.reporter_id = d.person_id
					WHERE  a.AREA_ID = ?   $REP_TYPE   $STATUS   $TIME   $LONGTIME 
					ORDER BY create_time DESC ) m
				LIMIT ?,? ) V
			LEFT JOIN NP_SA_ANNEX ANNEX ON V.RECORD_ID = ANNEX.REF_ID AND ANNEX.REF_FROM = 'PM_REPORT_BILL'
		]]>
	</entry>
	
	
	<entry key = "dispatchqueryreportlist">
		<![CDATA[
			 SELECT V.*,ANNEX.FILE_PATH FROM (
				SELECT ID AS RECORD_ID,REP_NO AS REPORT_CODE 
				,AREA_ID,CASE WHEN STATUS = 'WF-HANDLING' THEN 0
				WHEN STATUS = 'HANDLING' THEN 1 WHEN STATUS = 'WF_FEEDBACK' THEN 2 WHEN STATUS = 'COMPLETED' THEN 3
				ELSE -1 END AS STATUS,REP_TYPE AS TYPE_CODE
				,REP_DESC AS CONTENT
				,DATE_FORMAT(CREATE_TIME,'%Y-%m-%d %H:%i:%s') AS CREATE_TIME
				,CASE WHEN D_CREATE_TIME IS NOT NULL 
		        THEN CONCAT(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60*60*24)),CONVERT('å¤©' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60*60)),24),CONVERT('æ¶' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(D_CREATE_TIME))/(60)),60),CONVERT('å' USING utf8))
				ELSE CONCAT(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60*60*24)),CONVERT('å¤©' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60*60)),24),CONVERT('æ¶' USING utf8)
					,MOD(FLOOR((UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(CREATE_TIME))/(60)),60),CONVERT('å' USING utf8))
				END AS TIME_LONG
				,SOURCE,DISPATCH_PERSON_CODE
				FROM (
					SELECT a.ID,a.REP_NO,a.AREA_ID,a.STATUS,a.REP_TYPE,a.REP_DESC,a.CREATE_TIME
					,b.D_CREATE_TIME,c.ASSIGNER_ID,CASE WHEN d.person_id IS NOT NULL THEN 'JWG' ELSE 'JSH' END AS SOURCE,PERSON.PERSON_CODE AS DISPATCH_PERSON_CODE
					FROM np_pm_report_bill a
					LEFT JOIN (SELECT report_id,MAX(create_time) AS d_create_time FROM np_pm_report_task GROUP BY report_id) b 
					ON a.id = b.report_id
					LEFT JOIN np_pm_report_task c ON b.report_id = c.report_id AND b.d_create_time = c.create_time
					LEFT JOIN NP_SYS_PERSON PERSON ON c.ASSIGNER_ID = PERSON.ID
					LEFT JOIN (SELECT DISTINCT person_id FROM np_pm_app_user) d ON a.reporter_id = d.person_id
					WHERE   a.AREA_ID = ?    $REP_TYPE   $STATUS   $TIME   $LONGTIME  
					 AND (EXISTS(SELECT * FROM np_pm_report_task task 
						JOIN(SELECT report_id,MAX(create_time) AS create_time FROM np_pm_report_task GROUP BY report_id) t 
						ON task.report_id = t.report_id AND task.create_time = t.create_time
						WHERE task.report_id = a.id AND task.worker_id = ? AND (task.status <> 'FINISH' OR 
						(task.status = 'FINISH' AND NOT EXISTS(SELECT * FROM np_pm_report_task_event_log elog WHERE elog.task_id = task.id AND (elog.event = 'REJECT' OR elog.event = 'COMPLAIN'))))
					))
					ORDER BY create_time DESC ) m 
				LIMIT ?,? ) V
			LEFT JOIN NP_SA_ANNEX ANNEX ON V.RECORD_ID = ANNEX.REF_ID AND ANNEX.REF_FROM = 'PM_REPORT_BILL'
		]]>
	</entry>
	
	<!-- select * from np_pm_report_task task where task.REPORT_ID = a.ID AND task.WORKER_ID = ? -->
	<entry key = "SQL_QUERY_REPORT_DETAIL">
		<![CDATA[
			select BILL.ID as RECORD_ID,BILL.REP_NO AS REPORT_CODE,BILL.REPORTER_ID AS PERSON_ID
				,BILL.AREA_ID,PERSON.PERSON_NAME,PERSON.TELEPHONE AS PERSON_TEL,BILL.REP_TYPE AS TYPE_CODE
				,CASE WHEN BILL.STATUS = 'WF-HANDLING' THEN 0
					  WHEN BILL.STATUS = 'HANDLING' THEN 1 
					  WHEN BILL.STATUS = 'WF_FEEDBACK' THEN 2 
					  WHEN BILL.STATUS = 'COMPLETED' THEN 3
				 ELSE -1 END AS STATUS
				,BILL.REP_DESC AS CONTENT,BILL.BOOKING_TIME
	      		,DATE_FORMAT(BILL.CREATE_TIME,'%Y-%m-%d %H:%i:%s') AS CREATE_TIME
	      		,BILL.FEEDBACK AS APPRAISE_CONTENT,SATISFY_LEVEL AS STAR_LEVEL
	      		,DATE_FORMAT(BILL.FEEDBACK_TIME,'%Y-%m-%d %H:%i:%s') AS APPRAISE_TIME
	      		,CASE WHEN USR.PERSON_ID IS NOT NULL THEN 'JWG' ELSE 'JSH' END AS SOURCE
			from NP_PM_REPORT_BILL BILL 
			left join NP_SYS_PERSON PERSON on BILL.REPORTER_ID = PERSON.ID
			left join (SELECT DISTINCT PERSON_ID FROM NP_PM_APP_USER) USR on BILL.REPORTER_ID = USR.PERSON_ID
			where BILL.ID = ?
		]]>
	</entry>
	<entry key = "SQL_QUERY_TASK_LIST_BY_REPORT_ID">
		<![CDATA[
			SELECT TASK.ID AS BILL_ID,TASK.TASK_NO AS BILL_CODE
			,CASE WHEN TASK.STATUS <> 'RECEIPT' THEN 'DELETED' ELSE 'NORMAL' END AS STATUS
			,USR.USER_NAME AS RECEIVE_USER_CODE,WORKER.PERSON_NAME AS RECEIVE_PERSON_NAME
			,WORKER.TELEPHONE AS RECEIVE_PERSON_TEL
			,DATE_FORMAT(TASK.RECEIVE_TIME,'%Y-%m-%d %H:%i:%s') AS RECEIVE_TIME,TASK.TASK_REQ AS DISPATCH_MEMO
			,PERSON.PERSON_CODE AS DISPATCH_PERSON_CODE,PERSON.PERSON_NAME AS DISPATCH_PERSON_NAME,EVENT.EVENT,DATE_FORMAT(EVENT.EVENT_TIME,'%Y-%m-%d %H:%i:%s')
			AS EVENT_TIME,EVENT.MESSAGE
			FROM NP_PM_REPORT_TASK TASK
			LEFT JOIN NP_PM_REPORT_BILL BILL ON TASK.REPORT_ID = BILL.ID
			LEFT JOIN NP_SYS_PERSON PERSON ON TASK.ASSIGNER_ID = PERSON.ID
			LEFT JOIN NP_SYS_PERSON WORKER ON TASK.WORKER_ID = WORKER.ID
			LEFT JOIN NP_PM_APP_USER USR ON WORKER.ID = USR.PERSON_ID AND USR.STATUS = 'NORMAL'
			LEFT JOIN NP_PM_REPORT_TASK_EVENT_LOG EVENT ON TASK.ID = EVENT.TASK_ID
			WHERE BILL.ID = ?
			ORDER BY EVENT.EVENT_TIME DESC
		]]>
	</entry>
	<entry key = "SQL_QUERY_PIC_LIST_BY_REPORT_ID">
		<![CDATA[
			SELECT 'REPORT' AS TAG,REF_ID AS REF_ID,ANNEX.FILE_PATH AS FILE_PATH 
			FROM NP_SA_ANNEX ANNEX
			JOIN NP_PM_REPORT_BILL BILL ON ANNEX.REF_ID = BILL.ID
			WHERE ANNEX.REF_FROM = 'PM_REPORT_BILL' AND BILL.ID = ?
			UNION ALL
			SELECT EVENT.EVENT AS TAG,TASK.ID AS REF_ID,ANNEX.FILE_PATH AS FILE_PATH
			FROM NP_SA_ANNEX ANNEX
			LEFT JOIN NP_PM_REPORT_TASK_EVENT_LOG EVENT ON ANNEX.REF_ID = EVENT.ID
			LEFT JOIN NP_PM_REPORT_TASK TASK ON EVENT.TASK_ID = TASK.ID
			WHERE ANNEX.REF_FROM = 'PM_REPORT_TASK_EVENT' AND TASK.REPORT_ID = ?
		]]>
	</entry>
	<entry key = "SQL_QUERY_REPORT_USER_LIST">
		<![CDATA[
			select distinct usr.id as USER_ID,person.PERSON_NAME,person.POST,person.PHOTO AS PHOTO_URL,person.id as PERSON_ID
			from np_pm_app_user usr 
			inner join np_sys_person person on usr.person_id = person.id
     		inner join (
		           select * from np_sys_controlunit where FULL_PATH like ?
		     ) ctrl on person.controlunitid = ctrl.id
		      where usr.STATUS = 'NORMAL' AND person.status = 'NORMAL' 
		]]>
	</entry>
	<entry key = "SQL_REPORT_TASK_RESPONSE">
		<![CDATA[
			UPDATE NP_PM_REPORT_TASK SET STATUS = 'FINISH',TASK_RES = ?,SATISFY_LEVEL = ?,FINISH_TIME = {fn NOW()} WHERE ID = ?
		]]>
	</entry>
	<entry key = "SQL_QUERY_REPORT_INFO">
		<![CDATA[
			select distinct bill.REP_NO AS REPORT_CODE,bill.STATUS AS REPORT_STATUS 
			from np_pm_report_bill bill
			left join np_pm_report_task task on bill.id = task.report_id
			where bill.ID = ? or task.ID = ?
		]]>
	</entry>
	<entry key = "SQL_QUERY_SEARCH_INFO_USER">
		<![CDATA[
			select distinct person.id as person_id, person.person_name as USER_NAME,person.telephone as USER_TEL
			,case when area.area_class = 'ROOM' then area.area_name else NULL end as USER_ROOM
			,car.car_no as USER_NUMBER,seat.code as USER_PLACE
			,ct.np_card_type as USER_CARD_TYPE
			from np_sys_person person
			inner join np_eq_area_r_person arp on person.id = arp.person_id 
			inner join (select * from np_eq_area where FULL_PATH like ? order by FULL_PATH)  area on arp.area_id = area.id
			left join NP_CD_CARD card ON card.person_id = person.ID
			left join NP_DT_PARK_CAR_R_CARD crc on crc.CARD_ID = card.ID
			left join np_dt_park_car car on car.id=crc.CAR_ID 
			left join np_eq_park_seat seat on seat.id=car.seat_id 
			left join np_cd_card_rel_service_author cardService on card.id = cardService.card_id
			left join NP_CD_CARD_SUBSYSTEM_AUTHOR author on author.id=cardService.SERVICE_AUTH_ID 
			left join NP_CF_SUBSYSTEM_CARD_TYPE ct on ct.id=author.card_type 
			where person.is_clerk = 0 and person.status = 'NORMAL' and card.status = 'NORMAL'
			
		]]>
	</entry>
	<entry key = "SQL_QUERY_SEARCH_INFO_VISITOR">
		<![CDATA[
				select detail.id as DETAIL_ID, p.USER_NAME,p.USER_TEL,p.USER_ROOM,p.USER_NUMBER,p.USER_PLACE,p.USER_CARD_TYPE
			   		,detail.visiter_name as VISITOR_NAME 
			,detail.visiter_tel as VISITOR_TEL,detail.vehicle_no as VISITOR_NUMBER
			,'' as VISITOR_GOODS,DATE_FORMAT(invite.begin_time,'%Y-%m-%d %H:%i:%s') as VISITOR_INTIME
			,DATE_FORMAT(invite.end_time,'%Y-%m-%d %H:%i:%s') as VISITOR_OUTTIME
			,CASE INVITE.STATUS WHEN 0 THEN 'æªå°è®¿'
			WHEN 1 THEN 'è®¿é®ä¸­' WHEN 2 THEN 'å·²ç»æ' ELSE '' END AS VISITOR_STATUS
			from (
				select distinct person.id, person.person_name as USER_NAME,person.telephone as USER_TEL
				,case when area.area_class = 'ROOM' then area.area_name else NULL end as USER_ROOM
				,car.car_no as USER_NUMBER,seat.code as USER_PLACE,ct.np_card_type as USER_CARD_TYPE
				from np_sys_person person
				inner join np_eq_area_r_person arp on person.id = arp.person_id 
				inner join (select * from np_eq_area where FULL_PATH like ? order by FULL_PATH) area on arp.area_id = area.id
				left join NP_CD_CARD card ON card.person_id = person.ID
				left join NP_DT_PARK_CAR_R_CARD crc on crc.CARD_ID = card.ID
				left join np_dt_park_car car on car.id=crc.CAR_ID 
				left join np_eq_park_seat seat on seat.id=car.seat_id 
				left join np_cd_card_rel_service_author cardService on card.id = cardService.card_id
				left join NP_CD_CARD_SUBSYSTEM_AUTHOR author on author.id=cardService.SERVICE_AUTH_ID 
				left join NP_CF_SUBSYSTEM_CARD_TYPE ct on ct.id=author.card_type 
				where person.status = 'NORMAL'
				) p 
			join np_dt_visiter_invite invite on p.id = invite.person_id
			join np_dt_visiter_invite_detail detail on invite.id = detail.invite_id
			where invite.CREATE_TIME > TIMESTAMPADD(week,-1,{fn NOW()}) 
		
		]]>
	</entry>
	<entry key = "SQL_REPORT_TASK_UP_TRACK_INSERT">
		<![CDATA[
			INSERT INTO NP_IM_DATA_UP_TRACK(ID,UP_CONTENT,UP_TYPE,STATUS,CREATE_TIME)
			VALUES(?,?,'mc.estate.assignbill',0,{fn NOW()})
		]]>
	</entry>
	<entry key = "SQL_REPORT_TASK_EVENT_INSERT">
		<![CDATA[
			INSERT INTO NP_PM_REPORT_TASK_EVENT_LOG(ID,TASK_ID,EVENT,MESSAGE,PRODUCER,EVENT_TIME)
			VALUES(?,?,?,?,?,{fn NOW()})
		]]>
	</entry>
	<entry key = "SQL_QUERY_JWG_USER_INFO">
		<![CDATA[
		     SELECT DISTINCT USR.ID AS USER_ID,PERSON.ID AS PERSON_ID, AREA.ID AS AREA_ID,AREA.AREA_NAME AS AREA_NAME
			     ,PARK.CODE AS PARK_CODE,'' AS NISSP_URL,PERSON.PERSON_CODE,PERSON.PERSON_NAME
			     ,PERSON.SEX,PERSON.TELEPHONE,PERSON.PHOTO AS USER_PHOTO,PERSON.POST, UNIT2.NAME AS PLATFORM
				 ,USR.USER_TYPE AS USER_CLASS,AREA.ADDRESS AS ADDRESS,AREA.PRINCIPAL_TEL AS AREA_TEL
				 ,PARK2.ID AS PARK_ID,PERSON.IS_OPERATOR AS IS_OPERATOR
		     FROM NP_PM_APP_USER USR
	         JOIN NP_SYS_PERSON PERSON ON USR.PERSON_ID = PERSON.ID
	         JOIN NP_SYS_CONTROLUNIT UNIT ON PERSON.CONTROLUNITID = UNIT.ID
	         LEFT JOIN (SELECT CONTROLUNITID,MAX(ID) ID FROM NP_CF_SUBSYSTEM GROUP BY CONTROLUNITID) SUB ON UNIT.ID = SUB.CONTROLUNITID
	         LEFT JOIN (SELECT * FROM NP_EQ_AREA WHERE AREA_CLASS = 'BOROUGH') AREA ON SUB.CONTROLUNITID = AREA.CONTROLUNITID 
	         LEFT JOIN (SELECT SUBSYSTEM_ID,MIN(CODE) AS CODE FROM NP_EQ_PARK GROUP BY SUBSYSTEM_ID  )PARK ON SUB.ID = PARK.SUBSYSTEM_ID
	         LEFT JOIN NP_EQ_PARK PARK2 ON PARK.CODE = PARK2.CODE AND PARK.SUBSYSTEM_ID = PARK2.SUBSYSTEM_ID AND PARK2.STATUS = 'NORMAL'
	         LEFT JOIN NP_SYS_CONTROLUNIT UNIT2 ON UNIT2.CODE = {fn SUBSTRING(USR.USER_NAME,{fn LOCATE('$',USR.USER_NAME)}+1)}
	         WHERE USR.ID = ? 
		]]>
	</entry>
	<entry key = "SQL_QUERY_MY_REPORT_LIST_GROUP_BY_STATUS">
		<![CDATA[
			SELECT STATUS AS GNAME,COUNT(*) TOTAL 
			FROM NP_PM_REPORT_BILL BILL
			WHERE AREA_ID = ? AND ('ALL' = ? OR REP_TYPE = ? )
			AND REPORTER_ID = ?
			GROUP BY STATUS
		]]>
	</entry>
	<entry key = "SQL_QUERY_MY_TASK_LIST_GROUP_BY_REPTYPE">
		<![CDATA[
			SELECT BILL.REP_TYPE AS GNAME,COUNT(*) TOTAL
			FROM NP_PM_REPORT_BILL BILL 
			WHERE AREA_ID = ? AND ('ALL' = ? OR BILL.STATUS = ? )
			AND EXISTS(select * from np_pm_report_task task 
						join(select report_id,max(create_time) as create_time from np_pm_report_task group by report_id) t 
						on task.report_id = t.report_id and task.create_time = t.create_time
						where task.report_id = BILL.id and task.worker_id = ? and (task.status <> 'FINISH' OR 
						(task.status = 'FINISH' and not exists(select * from np_pm_report_task_event_log elog where elog.task_id = task.id and (elog.event = 'REJECT' or elog.event = 'COMPLAIN')))))
			GROUP BY BILL.REP_TYPE
		]]>
	</entry>
	<!--  AND ('ALL' = ? OR STATUS = ? ) -->
	<entry key = "SQL_QUERY_REPORT_LIST_GROUP_BY_REPTYPE">
		<![CDATA[
			 SELECT T.REP_TYPE AS GNAME,COUNT(*) TOTAL FROM (
		       SELECT BILL.AREA_ID,BILL.STATUS,BILL.REP_TYPE,TASK_2.ASSIGNER_ID,BILL.CREATOR 
		       FROM NP_PM_REPORT_BILL BILL
		       LEFT JOIN (SELECT REPORT_ID,MAX(CREATE_TIME) D_CREATE_TIME FROM NP_PM_REPORT_TASK GROUP BY REPORT_ID) TASK_1 
		       ON BILL.ID = TASK_1.REPORT_ID
		       LEFT JOIN NP_PM_REPORT_TASK TASK_2 
		       ON TASK_1.REPORT_ID = TASK_2.REPORT_ID AND TASK_1.D_CREATE_TIME = TASK_2.CREATE_TIME
		     )T
		     WHERE AREA_ID = ? 
		     AND ('ALL' = ? OR STATUS = ?)
		     GROUP BY T.REP_TYPE
		]]>
	</entry>
	<entry key = "SQL_QUERY_CARD_DELAY_LIST">
		<![CDATA[
	        SELECT CARD.ID AS CARD_ID,CARD.PHYSICAL_NO
	        ,DATE_FORMAT(CARD.ISSUE_TIME,'%Y-%m-%d %H:%i:%s') AS ISSUE_TIME
	        ,DATE_FORMAT(DEFER.OPERATE_TIME,'%Y-%m-%d %H:%i:%s') AS PAY_TIME
	        ,DEFER.DEFER_MONEY AS MONEY
	        ,DATE_FORMAT(DEFER.DEFER_BEGIN_TIME,'%Y-%m-%d') AS BEGIN_DATE
	        ,DATE_FORMAT(DEFER.DEFER_TIME,'%Y-%m-%d') AS END_DATE
	        ,CAR.CAR_NO
	        FROM NP_CD_CARD_DEFER DEFER
	        JOIN NP_CD_CARD CARD ON DEFER.CARD_ID = CARD.ID
	        LEFT JOIN NP_DT_PARK_CAR_R_CARD CRC ON CARD.ID = CRC.CARD_ID
	        LEFT JOIN NP_DT_PARK_CAR CAR ON CRC.CAR_ID = CAR.ID
	        WHERE CARD.ID = ?
	        AND (DEFER.OPERATE_TIME >= ? AND DEFER.OPERATE_TIME <= ?)
	        ORDER BY DEFER.OPERATE_TIME DESC LIMIT ?,?
      ]]>
	</entry>
	<entry key = "SQL_QUERY_MY_TASK_NODEAL">
		<![CDATA[
			 SELECT COUNT(*) AS BILL_NODEAL FROM NP_PM_REPORT_TASK TASK WHERE STATUS = 'RECEIPT' 
			 AND EXISTS(SELECT * FROM NP_PM_REPORT_BILL BILL WHERE TASK.REPORT_ID = BILL.ID)
			 AND WORKER_ID = ?
      ]]>
	</entry>
	<entry key = "SQL_QUERY_MY_DISPATCH_NODEAL">
		<![CDATA[
			  SELECT COUNT(*) AS DISPATCH_NODEAL
			  FROM NP_PM_REPORT_BILL REP 
			  JOIN NP_CF_SUBSYSTEM SUB ON REP.AREA_ID = SUB.AREA_ID
			  JOIN NP_SYS_PERSON PERSON ON SUB.CONTROLUNITID = PERSON.CONTROLUNITID
			  JOIN NP_PM_APP_USER USR ON PERSON.ID = USR.PERSON_ID
			  WHERE REP.STATUS = 'WF-HANDLING' 
			  AND (USR.USER_TYPE = 'MANAGER' OR USR.USER_TYPE = 'HIGHMANAGER')
			  AND PERSON.ID = ?
      ]]>
	</entry>
	<entry key = "SQL_QUERY_JWG_USER_PASSWORD">
		<![CDATA[
			SELECT ID AS USER_ID,PASSWORD FROM NP_PM_APP_USER WHERE ID = ?
		 ]]>
	</entry>
	<entry key = "SQL_UPDATE_COMMAND_DATA_SEND_TIME">
		<![CDATA[
			 UPDATE MIDDLE_SYNC_COMMON_DATA SET SEND_TIME={fn NOW()} WHERE RECORD_ID=? AND COMMAND_ID=? 
		 ]]>
	</entry>
	<entry key = "SQL_UPDATE_JWG_USER_PASSWORD">
		<![CDATA[
			UPDATE NP_PM_APP_USER SET PASSWORD = ? WHERE ID = ?
		 ]]>
	</entry>
	<entry key="SQL_QUERY_EQUIP_DOOR_COUNT">
		<![CDATA[
			SELECT DISTINCT EQ.EQUIP_CODE,EQ.DOOR_COUNT
			FROM NP_EQ_EQUIPMENT EQ 
			WHERE EQ.SUBSYSTEM_ID = '#1'
			AND EQ.EQUIP_CODE IN (#2)
		]]>
	</entry>
	<entry key="SQL_QUERY_OWNER_BASE_PERMISSION">
		<![CDATA[
			SELECT DISTINCT PERSON.ID AS PERSON_ID,PERSON.VISITER_KEY AS DYNAMIC_KEY,PERSON.SUB_PERSON_ID,CARD.PHYSICAL_NO
			,SUBSYSTEM.ID AS SUBSYSTEM_ID,SUBSYSTEM.AREA_ID,SUBSYSTEM.QRC_VERSION, SUBSYSTEM.SYSTEM_KEY, SUBSYSTEM.IS_UN_WIRE
			FROM NP_SYS_PERSON PERSON 
			JOIN NP_CD_CARD CARD ON PERSON.ID = CARD.PERSON_ID
			JOIN NP_CF_SUBSYSTEM SUBSYSTEM ON PERSON.CONTROLUNITID = SUBSYSTEM.CONTROLUNITID
			WHERE PERSON.SUB_PERSON_ID IS NOT NULL AND CARD.STATUS = 'NORMAL' 
			AND CARD.PERSON_ID = ? AND CARD.ID = ?
		]]>
	</entry>
	<entry key="SQL_QUERY_OWNER_DOOR_PERMISSION">
		<![CDATA[
			SELECT DISTINCT EQ.EQUIP_CODE,DATE_FORMAT(AUTH.END_TIME,'%Y-%m-%d') as END_TIME
			,CASE WHEN EQTYPE.TYPE_CODE = '0205' THEN 1 ELSE 0 END AS IS_LIFT
			FROM NP_EQ_EQUIPMENT EQ 
			INNER JOIN NP_EQ_EQUIPMENT_TYPE EQTYPE ON EQ.EQUIP_TYPE_ID = EQTYPE.ID 
			INNER JOIN NP_CD_CARD_RLT_EQUIP REL ON EQ.ID = REL.EQUIP_ID AND REL.DELETED_FLAG = 0
			INNER JOIN NP_CD_CARD CARD ON REL.CARD_ID = CARD.ID 
			INNER JOIN NP_SYS_PERSON PERSON ON CARD.PERSON_ID = PERSON.ID 
			INNER JOIN NP_CD_CARD_SUBSYSTEM_AUTHOR AUTH ON CARD.ID = AUTH.CARD_ID AND AUTH.DEL_STATUS = 0 
			INNER JOIN NP_CF_SERVICE SERV ON AUTH.SERVICE_ID = SERV.ID AND SERV.SERVICE_CODE = 'DOOR' 
			WHERE CARD.STATUS = 'NORMAL' AND EQ.STATUS = 'NORMAL' AND PERSON.VISITER_KEY IS NOT NULL
			AND (EQTYPE.TYPE_CODE = '0202' OR EQTYPE.TYPE_CODE = '0203' OR (EQTYPE.TYPE_CODE = '0205' AND REL.OWNER_FLOOR = 1)) 
			AND EQ.EQUIP_CODE LIKE '%|%' AND CARD.PERSON_ID = ? AND CARD.ID = ?
			ORDER BY EQ.EQUIP_CODE
		]]>
	</entry>
	<entry key="SQL_QUERY_OWNER_PARK_PERMISSION">
		<![CDATA[
			SELECT DISTINCT EQ.EQUIP_CODE,DATE_FORMAT(AUTH.BEGIN_TIME,'%Y-%m-%d') AS BEGIN_TIME,DATE_FORMAT(AUTH.END_TIME,'%Y-%m-%d') as END_TIME
			FROM NP_EQ_EQUIPMENT EQ 
			INNER JOIN NP_EQ_EQUIPMENT_TYPE EQTYPE ON EQ.EQUIP_TYPE_ID = EQTYPE.ID 
			INNER JOIN NP_CD_CARD_RLT_EQUIP REL ON EQ.ID = REL.EQUIP_ID AND REL.DELETED_FLAG = 0
			INNER JOIN NP_CD_CARD CARD ON REL.CARD_ID = CARD.ID 
			INNER JOIN NP_SYS_PERSON PERSON ON CARD.PERSON_ID = PERSON.ID 
			INNER JOIN NP_CD_CARD_SUBSYSTEM_AUTHOR AUTH ON CARD.ID = AUTH.CARD_ID AND AUTH.DEL_STATUS = 0 
			INNER JOIN NP_CF_SERVICE SERV ON AUTH.SERVICE_ID = SERV.ID AND SERV.SERVICE_CODE = 'PARK' 
			WHERE CARD.STATUS = 'NORMAL' AND EQ.STATUS = 'NORMAL' AND PERSON.VISITER_KEY IS NOT NULL
			AND (EQTYPE.TYPE_CODE = '0201')
			AND CARD.PERSON_ID = ? AND CARD.ID = ?
			ORDER BY EQ.EQUIP_CODE
		]]>
	</entry>
	<entry key="SQL_QUERY_REPORT_AUTO_APPRAISE">
		<![CDATA[
			SELECT BILL.ID AS REPORT_ID,TASK.COMPLETE_TIME
			FROM NP_PM_REPORT_BILL BILL
			JOIN (SELECT REPORT_ID,MAX(FINISH_TIME) COMPLETE_TIME FROM NP_PM_REPORT_TASK TASK 
			WHERE STATUS = 'COMPLETE'  GROUP BY REPORT_ID) TASK ON BILL.ID = TASK.REPORT_ID
			WHERE BILL.STATUS = 'WF_FEEDBACK' AND DATEDIFF(NOW(),TASK.COMPLETE_TIME) >= ?
			ORDER BY TASK.COMPLETE_TIME DESC 
		]]>
	</entry>
	<entry key="SQL_QUERY_PARK_SPACE_BY_PARK_CODE">
		<![CDATA[
			SELECT PK.CODE AS PARK_CODE
			,CASE WHEN PK.TOTAL_SPACE IS NULL THEN 0 
			 WHEN PK.IN_SPACE IS NULL THEN PK.TOTAL_SPACE
			 ELSE (PK.TOTAL_SPACE - PK.IN_SPACE) END AS IN_SPACE
			FROM  NP_EQ_PARK PK  
			WHERE STATUS = 'NORMAL' AND PK.CODE = ?
		]]>
	</entry>
	<entry key="SQL_QUERY_REPORT_TYPE_BY_ID">
		<![CDATA[
			SELECT REP_TYPE,CASE REP_TYPE WHEN 'COMPLAINT' THEN 'æè¯' 
			WHEN 'REPAIR' THEN 'æ¥ä¿®' WHEN 'PRAISE' THEN 'è¡¨æ¬'
			WHEN 'PATROL' THEN 'å·¡æ£' WHEN 'ADVISE' THEN 'å»ºè®®' ELSE 'å¶å®' END AS REPORT_TYPE 
			FROM NP_PM_REPORT_BILL WHERE ID = ?
		]]>
	</entry>
	<entry key="SQL_QUERY_REPORT_PARAM_BY_ID">
		<![CDATA[
			SELECT BILL.ID AS REPORT_ID,BILL.REPORTER_ID,TASK.ID AS TASK_ID,TASK.ASSIGNER_ID,TASK.WORKER_ID,TASK.STATUS
			,CASE WHEN TASK.STATUS = 'COMPLETE' THEN 'COMPLAIN' ELSE 'REJECT' END AS EVENT,BILL.STATUS AS REP_STATUS
			,TASK.TASK_NO,CASE BILL.REP_TYPE WHEN 'COMPLAINT' THEN 'æè¯' 
			WHEN 'REPAIR' THEN 'æ¥ä¿®' WHEN 'PRAISE' THEN 'è¡¨æ¬'
			WHEN 'PATROL' THEN 'å·¡æ£' WHEN 'ADVISE' THEN 'å»ºè®®' ELSE 'å¶å®' END AS REPORT_TYPE
			FROM NP_PM_REPORT_BILL BILL
			JOIN (SELECT REPORT_ID,MAX(CREATE_TIME) CREATE_TIME FROM NP_PM_REPORT_TASK GROUP BY REPORT_ID) T ON BILL.ID = T.REPORT_ID
			JOIN NP_PM_REPORT_TASK TASK ON T.REPORT_ID = TASK.REPORT_ID AND T.CREATE_TIME = TASK.CREATE_TIME
			WHERE BILL.ID = ? OR TASK.ID = ?
		]]>
	</entry>
	<entry key="SQL_QUERY_PARK_PLACE_LIST">
		<![CDATA[
			SELECT S.ID AS RECORD_ID,S.CODE AS PLACE_CODE
			, S.TYPE AS PLACE_TYPE
			,S.PLACE_STATUS AS STATUS 
			,S.AREA AS AREA_NAME
			,S.FLOOR AS FLOOR
			,case when S.BOOK_FLAG is null then 1 else S.BOOK_FLAG END AS BOOK_FLAG
			FROM  NP_EQ_PARK_SEAT S
			left JOIN  NP_CF_SUBSYSTEM T ON T.ID = S.SUBSYSTEM_ID where T.CODE = ? AND S.STATUS = '0'
		]]>
	</entry>
	
	<entry key="SQL_QUERY_CAR_PARKING_SPOT">
		<![CDATA[
			SELECT 
			 CASE WHEN S.PARK_ID IS NULL THEN 'æ æ°æ®' ELSE S.PARK_ID END AS PARK_CODE
			,CASE WHEN S.CODE IS NULL THEN 'æ æ°æ®' ELSE S.CODE END AS PARK_PLACE_CODE
			,CASE WHEN S.AREA IS NULL THEN 'æ æ°æ®' ELSE S.AREA END AS AREA_NAME 
			,CASE WHEN S.FLOOR IS NULL THEN 'æ æ°æ®' ELSE S.FLOOR END AS FLOOR 
			,CASE WHEN S.CAR_NO IS NULL THEN 'æ æ°æ®' ELSE S.CAR_NO END AS CAR_NO
			FROM  NP_EQ_PARK_SEAT S
			left JOIN  NP_CF_SUBSYSTEM T ON T.ID = S.SUBSYSTEM_ID where T.CODE = ? AND S.CAR_NO = ? AND S.STATUS = '0'
		]]>
	</entry>
	<!-- æ ¹æ®æä¾çæ¨¡ç³è½¦çä¿¡æ¯ï¼æ¥è¯¢å¯¹åºçè½¦ä½ä¿¡æ¯ -->
	<entry key="SQL_QUERY_FUZZY_CAR_PARKING_SPOT">
		<![CDATA[
			SELECT 
			 S.ID,
			 CASE WHEN S.PARK_ID IS NULL THEN '' ELSE S.PARK_ID END AS PARK_CODE
			,CASE WHEN S.CODE IS NULL THEN '' ELSE S.CODE END AS PARK_PLACE_CODE
			,CASE WHEN S.AREA IS NULL THEN '' ELSE S.AREA END AS AREA_NAME 
			,CASE WHEN S.FLOOR IS NULL THEN '' ELSE S.FLOOR END AS FLOOR 
			,S.CAR_NO
			FROM  NP_EQ_PARK_SEAT S
			INNER JOIN  NP_CF_SUBSYSTEM T ON T.ID = S.SUBSYSTEM_ID where T.CODE = ? AND S.CAR_NO is not null and S.STATUS = 0;
		]]>
	</entry>
	
	
	<entry key="SQL_QUERY_CURRENT_PARK_TRAFFIC_IN">
		<![CDATA[

        SELECT EQUIP.EQUIP_NAME,COUNT(I.ID) AS EQUIP_TRAFFIC
        	FROM NP_DT_PARK_IN I 
			LEFT JOIN NP_EQ_EQUIPMENT EQUIP ON I.EQUIP_ID = EQUIP.ID
        	LEFT JOIN  NP_CF_SUBSYSTEM C
        	ON C.ID = I.SUBSYSTEM_ID
        	WHERE C.CODE = ? and I.IN_TIME >= ? and I.IN_TIME < ?
			group by I.EQUIP_ID
		]]>
	</entry>
	
		
	<entry key="SQL_QUERY_CURRENT_PARK_TRAFFIC_OUT">
		<![CDATA[
		
	   SELECT EQUIP.EQUIP_NAME,COUNT(O.ID) AS EQUIP_TRAFFIC 
	   FROM NP_DT_PARK_OUT O 
	   LEFT JOIN NP_EQ_EQUIPMENT EQUIP ON O.EQUIP_ID = EQUIP.ID
	   LEFT JOIN  NP_CF_SUBSYSTEM C 
	   ON C.ID = O.SUBSYSTEM_ID 
       where C.CODE = ? AND O.OUT_TIME >=? and O.OUT_TIME < ?
       group by O.EQUIP_ID
		]]>
	</entry>
	
	
	<entry key = "SQL_REPORT_TASK_REJECT">
		<![CDATA[
			UPDATE NP_PM_REPORT_TASK SET STATUS = 'FINISH',TASK_MSG = ?,FINISH_TIME = {fn NOW()} WHERE ID = ?
		]]>
	</entry>
	<entry key = "SQL_SA_ANNEX_DELETE">
		<![CDATA[
			DELETE FROM NP_SA_ANNEX WHERE REF_ID = ? AND REF_FROM = ?
		]]>
	</entry>
	<entry key = "SQL_QUERY_EVENT_INFO">
		<![CDATA[
			SELECT ID AS EVENT_ID FROM NP_PM_REPORT_TASK_EVENT_LOG WHERE TASK_ID = ? AND EVENT = ?
		]]>
	</entry>
	<entry key = "SQL_QUERY_CARD_PERMISSION">
		<![CDATA[
			SELECT ID AS RECORD_ID,CARD_ID,EQUIP_ID,OWNER_FLOOR
			,CASE WHEN DELETED_FLAG = 0 THEN 'FALSE' ELSE 'TRUE' END AS DELETED
			FROM NP_CD_CARD_RLT_EQUIP 
			WHERE SYNC_FLAG = 0 OR (SYNC_FLAG = 2 AND SEND_TIME < ADDTIME(NOW(),'-0:2:0')) 
			LIMIT ?,?
		]]>
	</entry>
	<entry key = "SQL_UPDATE_CARD_PERMISSION">
		<![CDATA[
			UPDATE NP_CD_CARD_RLT_EQUIP SET SEND_TIME = {fn NOW()}, SYNC_FLAG = ? WHERE ID = ? AND SYNC_FLAG = ?
		]]>
	</entry>
	<entry key = "SQL_CLEAR_DELETED_CARD_PERMISSION">
		<![CDATA[
			DELETE FROM NP_CD_CARD_RLT_EQUIP WHERE DELETED_FLAG = 1 AND SYNC_FLAG = 1
		]]>
	</entry>
	<entry key = "SQL_FETCH_UNIT_FULLPATH_BY_PERSON">
		<![CDATA[
			SELECT U.FULL_PATH FROM NP_SYS_PERSON P
			JOIN NP_SYS_CONTROLUNIT U ON P.CONTROLUNITID = U.ID
			WHERE P.ID = ?
		]]>
	</entry>
	<entry key = "SQL_FETCH_AREA_FULLPATH_BY_ID">
		<![CDATA[
			SELECT A.FULL_PATH 
			FROM NP_EQ_AREA A
			WHERE A.ID = ?
		]]>
	</entry>
	
	<!-- æ¥è¯¢åºåè½¦è¾ä¿¡æ¯ -->
	<entry key = "SQL_QUERY_PARK_IN_CAR">
		<![CDATA[
			SELECT STAY.CARD_ID,STAY.CONTROLUNITID,STAY.CAR_NUMBER AS CAR_NO,STAY.IN_TIME AS IN_TIME,
			DIC.ITEM_NAME AS IN_EVENT_TYPE,STAY.IN_EQUIP_NAME AS IN_EQUIP,STAY.IN_OPERATOR AS IN_OPERATOR,STAY.LOCK_STATUS AS IS_LOCK
			FROM NP_DT_PARK_STAY STAY 
		]]>
	</entry>
	
	<!-- æ¥è¯¢è½¦è¾åºåºä¿¡æ¯ -->
	<entry key = "SQL_QUERY_PARK_OUT">
		<![CDATA[
			SELECT PARKOUT.ID,PARKOUT.CAR_NUMBER AS CAR_NO, PARKOUT.CONTROLUNITID ,PARKOUT.IN_TIME ,PARKOUT.IN_EQUIP_NAME AS IN_EQUIP,
			PARKOUT.OUT_TIME,DIC.ITEM_NAME AS OUT_EVENT_TYPE,PARKOUT.OUT_EQUIP_NAME AS OUT_EQUIP,PARKOUT.OUT_OPERATOR,PARKOUT.PAY_TYPE_NAME,
			PARKOUT.YS_MONEY, PARKOUT.SS_MONEY, PARKOUT.YH_MONEY, 
			CASE WHEN PARKOUT.HG_MONEY IS NULL THEN 0.00 ELSE PARKOUT.HG_MONEY END AS HG_MONEY,
			ROUND(PARKOUT.PARKING_TIME/60) AS PARKING_TIME,
			CASE WHEN PARKOUT.IDNO IS NOT NULL THEN PARKOUT.IDNO ELSE CARD.PHYSICAL_NO END AS CARD_NO,
			CARDTYPE.CARD_TYPE_NAME AS CARD_TYPE
			FROM NP_DT_PARK_OUT PARKOUT force index(IX_PARK_OUT_3)
			LEFT JOIN NP_CD_CARD CARD ON PARKOUT.CARD_ID = CARD.ID
			LEFT JOIN np_cf_subsystem_card_type CARDTYPE ON PARKOUT.CARD_TYPE = CARDTYPE.ID
			LEFT JOIN NP_SYS_DICTIONARY DIC ON PARKOUT.EVENT_TYPE = DIC.ITEM_CODE  AND DIC.TYPE_CODE = 'D060'
		]]>
	</entry>
	
	<!-- è½¦è®¯è½¦è¾éè½¦è§£éç¶æ -->
	<entry key = "SQL_QUERY_CAR_LOCK_STATUS">
	<![CDATA[
			SELECT CAR_NUMBER AS CAR_NO, LOCK_STATUS from NP_DT_PARK_STAY where CAR_NUMBER = ?
			AND SUBSYSTEM_ID = (SELECT ID FROM NP_CF_SUBSYSTEM WHERE CODE = ?)
	]]>
	</entry>
	
	<!-- ç¤¾åºæ°æ®ä¿¡æ¯ééæ¥è¯¢-->
	<entry key = "SQL_QUERY_DATA_STAT">
	<![CDATA[
			SELECT STAT.ID AS RECORD_ID,SUB.CODE AS SUBSYSTEM_CODE,SUB.NAME AS SUBSYSTEM_NAME,STAT.ONLINE_TIME,
			DATE_FORMAT(STAT.WORK_DATE,'%Y-%m-%d') AS STAT_PERIOD
			FROM NP_CF_SUBSYSTEM_ONLINE_STAT STAT
			INNER JOIN NP_CF_SUBSYSTEM SUB ON STAT.SUBSYSTEM_ID = SUB.ID 
			WHERE STAT.WORK_DATE >= ? and STAT.WORK_DATE <?
	]]>
	</entry>
	
	<!-- éææå¡æ¥æ¶å°ç»ç«¯è¿åçéè½¦è§£éä¿¡æ¯åï¼éè¦ä¿®æ¹åºåè½¦è¾çéè½¦è§£éç¶æ -->
	<entry key="SQL_UPDATE_PARKIN_CAR_LOCK_STATUS">
		<![CDATA[
			UPDATE NP_DT_PARK_STAY SET LOCK_STATUS = ? WHERE CAR_NUMBER = ? 
		]]>
	</entry>
	
	<!-- æ¥è¯¢æ­£å¨è®¿é®ä¸­çè®¿å®¢ä¿¡æ¯-->
	<entry key="SQL_QUERY_VISITER_VISITING_RECORDS">
		<![CDATA[
			select DETAIL.VISITER_TEL AS VISITER_TELEPHONE,PERSON.PERSON_NAME AS VISITER_NAME,INVITE.AREA_ID,AREA.AREA_NAME
			from NP_DT_VISITER_INVITE INVITE 
			INNER JOIN NP_SYS_PERSON PERSON ON INVITE.PERSON_ID = PERSON.ID
			INNER JOIN NP_DT_VISITER_INVITE_DETAIL DETAIL ON INVITE.ID = DETAIL.INVITE_ID 
			INNER JOIN NP_EQ_AREA AREA ON INVITE.AREA_ID = AREA.ID
			where INVITE.STATUS = 1 and INVITE.CLOUD_USER_ID = ?

		]]>
	</entry>
	
	<entry key="SQL_QUERY_VISITER_VISITING_RECORDS_WITH_CARD">
		<![CDATA[
			select DETAIL.VISITER_TEL AS VISITER_TELEPHONE,PERSON.PERSON_NAME AS VISITER_NAME,INVITE.AREA_ID,AREA.AREA_NAME
			from NP_DT_VISITER_INVITE INVITE 
			INNER JOIN NP_SYS_PERSON PERSON ON INVITE.PERSON_ID = PERSON.ID
			INNER JOIN NP_DT_VISITER_INVITE_DETAIL DETAIL ON INVITE.ID = DETAIL.INVITE_ID 
			INNER JOIN NP_CD_CARD CARD ON CARD.ID = DETAIL.CARD_ID
			INNER JOIN NP_EQ_AREA AREA ON INVITE.AREA_ID = AREA.ID
			where INVITE.STATUS = 1 and INVITE.CLOUD_USER_ID = ?
			and CARD.PHYSICAL_NO = ?
		]]>
	</entry>
	
		<!-- éææå¡ä¸ä¼ å¡æå¤±æåæ¶æ¯å°äºå¹³å° -->
	<entry key="SQL_UPLOAD_ECARD_LOSS_SUCCESS">
		<![CDATA[
			SELECT 
			LOSS.ID AS ID,
			LOSS.ID AS RECORD_ID,
			LOSS.CARD_ID,
			LOSS.LOSS_TIME AS LOSSED_TIME, 
			'TRUE' AS IS_ADD
			FROM NP_CD_CARD_LOSS LOSS 
			LEFT JOIN MIDDLE_SYNC_COMMON_DATA SYNC 
			ON SYNC.RECORD_ID = LOSS.ID AND SYNC.COMMAND_ID = 'mc.card.lossedsuccess'   
            WHERE SYNC.RECORD_ID IS NULL and LOSS.UNLOSS_TIME is NULL
            LIMIT 1000
		]]>
	</entry>
	<entry key="SQL_RESEND_ECARD_LOSS_SUCCESS">
		<![CDATA[
			SELECT     
			SYNC.RECORD_ID AS ID,
			SYNC.RECORD_ID,
			LOSS.CARD_ID,
			LOSS.LOSS_TIME AS LOSSED_TIME, 
			'FALSE' AS IS_ADD
             FROM MIDDLE_SYNC_COMMON_DATA SYNC 
             INNER JOIN  NP_CD_CARD_LOSS LOSS ON SYNC.RECORD_ID=LOSS.ID AND SYNC.COMMAND_ID = 'mc.card.lossedsuccess'  
             AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:0:10') AND SYNC.SYNC_FLAG = 0 and LOSS.UNLOSS_TIME is NULL
             LIMIT 1000
		]]>
	</entry>
	
	<!-- æ¥è¯¢äººåéè¡è®°å½ -->
	<entry key="SQL_QUERY_PERSON_ACCESS">
		<![CDATA[
			select EQUIP_NAME,DATE_FORMAT(ACCESS_TIME,'%Y-%m-%d %H:%i:%s')as ACCESS_TIME ,TYPE_NAME,DATE_FORMAT(NOW(),'%Y-%m-%d %H:%i:%s') as QUERY_TIME FROM
			(select ifnull(equip.equip_name,'æªç¥è®¾å¤') AS EQUIP_NAME,door.open_time as ACCESS_TIME,
			case door.open_mode when 'QOPEN' then 'äºç»´ç å¼é¨' when 'BLUETOOTHOPEN' then 'èçå¼é¨' else 'APPå¼é¨' end as TYPE_NAME 
			from np_sys_person person 
			left join np_cd_card c on person.id = c.person_id
			left join np_dt_door_inout door on door.card_id = c.id
			left join np_eq_equipment equip on door.equip_id = equip.id
			where person.id = ? and (door.open_mode = 'QOPEN' or door.open_mode = 'APPOPEN' or door.open_mode='BLUETOOTHOPEN')
			union all 
			select ifnull(equip.equip_name,'æªç¥è®¾å¤') AS EQUIP_NAME,door.open_time AS ACCESS_TIME,'äºç»´ç å¼é¨' as TYPE_NAME 
			from np_sys_person person 
			left join np_dt_visiter_invite invite on person.id = invite.person_id
			left join np_dt_visiter_invite_detail detail on invite.id = detail.invite_id
			left join np_dt_door_inout door on door.card_id = detail.card_id
			left join np_eq_equipment equip on door.equip_id = equip.id
			where person.id = ? and door.open_mode = 'QOPEN' 
			union all 
			select ifnull(parkout.OUT_EQUIP_NAME,'æªç¥åºåºè®¾å¤') AS EQUIP_NAME,parkout.out_time AS ACCESS_TIME,'è®¿å®¢è½¦çå¼é¸' as TYPE_NAME 
			from np_sys_person person 
			left join np_dt_visiter_invite invite on person.id = invite.person_id
			left join np_dt_visiter_invite_detail detail on invite.id = detail.invite_id
			left join np_dt_park_out parkout on parkout.card_id = detail.card_id
			where person.id = ? and parkout.id is not NULL
			union all 
			select ifnull(parkin.IN_EQUIP_NAME,'æªç¥å¥åºè®¾å¤') AS EQUIP_NAME,parkin.in_time AS ACCESS_TIME,'è®¿å®¢è½¦çå¼é¸' as TYPE_NAME 
			from np_sys_person person 
			left join np_dt_visiter_invite invite on person.id = invite.person_id
			left join np_dt_visiter_invite_detail detail on invite.id = detail.invite_id
			left join np_dt_park_in parkin on parkin.card_id = detail.card_id
			where person.id = ? and parkin.id is not NULL) AS TEMP
		]]>
	</entry>
	<!-- æ¥è¯¢ç©ä¸ç®¡çè´¹ -->
	<entry key="SQL_QUERY_PROPERTY_FEE">
		<![CDATA[
			select area.AREA_NAME,area.ID as AREA_ID, item.OCCUR_MONTH AS MONTH, item.ROOM_NO AS HOUSE_NO, item.PERSON_NAME, item.ID AS FEE_ID,item.WATER_COST AS WATER_FEE, 
			item.ELECTRICITY_COST AS ELEC_FEE,item.GAS_COST AS GAS_FEE,item.MANAGEMENT_COST AS PROPERTY_FEE, item.REMARK AS FEE_DESC, item.DETAIL, 
			ifnull(item.IS_PAY,0) AS IS_PAY, temp.WATER_MARK as WATER_PAY_FLAG, temp.ELE_MARK as ELEC_PAY_FLAG, temp.GAS_MARK as GAS_PAY_FLAG,
			item.IS_WATER_PAY, item.IS_ELEC_PAY, item.IS_GAS_PAY,
			case when area.IS_PAYBILL = 1 then 1 else 0 end as IS_ALLOW
			from np_pm_ap_item item 
			inner join np_eq_area area on area.controlunitid = item.controlunitid AND area.AREA_CLASS = 'BOROUGH'
			inner join np_pm_import_temp temp on item.controlunitid = temp.controlunitid
			where area.ID = ? AND item.OCCUR_MONTH >= ? and item.OCCUR_MONTH < ?
		]]>
	</entry>
	
	<!-- æ ¹æ®äºæå¡è¯·æ±çFEE_IDæ¥æ¾å¯¹åºçåºæ¶éé¢ -->
	<entry key="SQL_QUERY_SUM_COST_BY_ID">
		<![CDATA[
			select CONTROLUNITID, SUM_COST,MANAGEMENT_COST FROM np_pm_ap_item WHERE ID = ?
		]]>
	</entry>
	
	<!-- äºå¹³å°éç¥æ¯ä»æåï¼ä¿®æ¹ç©ä¸è´¹è®°å½ -->
	<entry key="SQL_UPDATE_PROPERTY_FEE_RECORD">
		<![CDATA[
			UPDATE np_pm_ap_item SET IS_PAY = ?, ONLY_MANAGE = ?, REALITY = ?, PAY_PERSON_ID = ?, PAY_TYPE = ?, PAY_TIME = ?, IS_WATER_PAY = ?, 
			IS_ELEC_PAY = ?, IS_GAS_PAY = ?  WHERE ID = ?
		]]>
	</entry>
	
	<!-- å¡é¿æè¿æä¿¡æ¯æ±æ» -->
	<entry key="SQL_QUERY_ECARD_LONG_OVER_MSG">
		<![CDATA[
 			SELECT replace(UUID(),'-','') AS REQUEST_ID,
                   C.ID AS CARD_ID,
                   C.PHYSICAL_NO AS PHYSICAL_NO,
                   DATEDIFF(NOW(),T.END_TIME) AS D_DAY,
                   APP.ID AS USER_ID,
				   P.TELEPHONE AS USER_TEL   
              FROM NP_CD_CARD_SUBSYSTEM_AUTHOR T
              INNER JOIN NP_CD_CARD C ON T.CARD_ID = C.ID AND C.STATUS='NORMAL'
              INNER JOIN NP_CF_SUBSYSTEM SUB ON SUB.ID = C.SUBSYSTEM_ID
              INNER JOIN NP_PM_APP_USER APP ON APP.PERSON_ID = SUB.PERSON_ID
			  INNER JOIN NP_SYS_PERSON P ON P.ID=SUB.PERSON_ID
              INNER JOIN NP_CF_SERVICE S ON T.SERVICE_ID=S.ID AND S.SERVICE_CODE='PARK'
              WHERE T.END_TIME = DATE_FORMAT(ADDDATE(NOW(),-?),'%Y-%m-%d') 
		]]>
	</entry>
	
	<!-- å¡é¿ææªä½¿ç¨ä¿¡æ¯æ±æ» -->
	<!-- T1æ¥è¯¢ææå¨æ¥æXæåºå¥åºè®°å½çå¡-->
	<!-- T2æ¥è¯¢å¨æ¥æXä¹åæåºå¥åºè®°å½çå¡ï¼T1 T2ä¸èµ·æ¥è¯¢åºæååºå¥åºæ¥æä¸ºXçå¡-->
	<entry key="SQL_QUERY_ECARD_LONG_UNUSE_MSG">
		<![CDATA[
 			SELECT DISTINCT
                   C.ID AS CARD_ID,
                   C.PHYSICAL_NO AS PHYSICAL_NO,
                   ? AS D_DAY,
                   APP.ID AS USER_ID,
				   P.TELEPHONE AS USER_TEL
              FROM NP_CD_CARD_SUBSYSTEM_AUTHOR T
              INNER JOIN NP_CD_CARD C ON T.CARD_ID = C.ID AND C.STATUS='NORMAL' AND T.END_TIME>NOW()
              INNER JOIN NP_CF_SUBSYSTEM SUB ON SUB.ID = C.SUBSYSTEM_ID
              INNER JOIN NP_PM_APP_USER APP ON APP.PERSON_ID = SUB.PERSON_ID
			  INNER JOIN NP_SYS_PERSON P ON P.ID=SUB.PERSON_ID
							WHERE NOT EXISTS(SELECT 1 FROM 
							(SELECT CARD_ID FROM NP_DT_PARK_OUT WHERE OUT_TIME<=NOW() AND OUT_TIME >= DATE_ADD(date(NOW()),INTERVAL -? DAY) 
					GROUP BY CARD_ID
								UNION ALL
								SELECT CARD_ID FROM NP_DT_PARK_IN WHERE IN_TIME<=NOW() AND IN_TIME >= DATE_ADD(date(NOW()),INTERVAL -? DAY) 
					GROUP BY CARD_ID
								union ALL
								SELECT CARD_ID FROM np_dt_door_inout  WHERE OPEN_TIME<=NOW() AND OPEN_TIME >= DATE_ADD(date(NOW()),INTERVAL -? DAY) 
					GROUP BY CARD_ID
							) AS TEMP
								WHERE TEMP.CARD_ID = T.CARD_ID )
							AND EXISTS(SELECT 1 from(
                            SELECT CARD_ID FROM NP_DT_PARK_OUT WHERE OUT_TIME > DATE_ADD(date(NOW()),INTERVAL -? DAY) AND OUT_TIME < DATE_ADD(date(NOW()),INTERVAL -? DAY) GROUP BY CARD_ID
							UNION ALL
                            SELECT CARD_ID FROM np_dt_park_in WHERE in_TIME > DATE_ADD(date(NOW()),INTERVAL -? DAY) AND in_TIME < DATE_ADD(date(NOW()),INTERVAL -? DAY) GROUP BY CARD_ID
							UNION ALL
                            SELECT CARD_ID FROM np_dt_door_inout WHERE OPEN_TIME > DATE_ADD(date(NOW()),INTERVAL -? DAY) AND OPEN_TIME < DATE_ADD(date(NOW()),INTERVAL -? DAY) GROUP BY CARD_ID
							)temp2 where temp2.CARD_ID = T.CARD_ID 
                            )
                            and T.CARD_ID is not null and T.CARD_ID <> '11111111111111111111111111111111' 
		]]>
	</entry>
	
	<!-- æ´æ°ä¸å¡è¡¨ä¸ä¼ è®°å½çSEND_TIME -->
	<entry key="SQL_UPLOAD_DATA_SEND_TIME_UPDATE">
		<![CDATA[
 			UPDATE $TABLE$ SET SEND_TIME = {fn NOW()}, SYNC_FLAG = ?  WHERE ID=?
		]]>
	</entry>
	
	<!-- æ´æ°ä¸åä¸­é´è¡¨middle_sync_common_data_downä¸­çåæ­¥æ¶é´ååæ­¥æ è¯ -->
	<entry key="SQL_MIDDLE_DOWN_DATA_UPDATE">
		<![CDATA[
 			UPDATE MIDDLE_SYNC_COMMON_DATA_DOWN SET SEND_TIME = {fn NOW()}, SYNC_FLAG = ?  WHERE ID=?
		]]>
	</entry>
	
	<!-- æ´æ°ä¸å¡è¡¨ä¸ä¼ è®°å½çSYNC_FLAG -->
	<entry key="SQL_UPLOAD_DATA_SYNC_FLAG_UPDATE">
		<![CDATA[
 			UPDATE $TABLE$ SET SYNC_FLAG = ? WHERE ID=? and SYNC_FLAG = ?
		]]>
	</entry>
	
	<!-- OSSä¸ä¼ å¤±è´¥çæä»¶idä¸åå°ééå¨ -->
	<entry key="SQL_QUERY_OSS_ERR_DOWN">
		<![CDATA[
 			SELECT 
	            ID AS ID,
	            FILE_ID AS NISSP_ID,
                SUBSYSTEM_CODE,
                'dm.oss.fail' as COMMAND_ID
	      FROM NP_IM_UPLOAD_FAIL_OSS WHERE SYNC_FLAG <> '1' ORDER BY SYNC_TIME
		  LIMIT 500 
		]]>
	</entry>
	
	<entry key="UPDATE_OSS_FAIL_DOWN_DATA_TIME">
		<![CDATA[
			 UPDATE NP_IM_UPLOAD_FAIL_OSS SET SYNC_TIME = {fn NOW()} WHERE ID = ?
		]]>
	</entry>
	
	<entry key="UPDATE_OSS_FAIL_DOWN_DATA">
		<![CDATA[
			 UPDATE NP_IM_UPLOAD_FAIL_OSS SET SYNC_FLAG = '1' WHERE ID = ?
		]]>
	</entry>
	
	<!-- æ ¹æ®äºæå¡è¿åçæ°æ®æ¥æ¾å¯¹åºçæ¨¡æ¿ -->
	<entry key="SQL_FEE_TEMP_BY_ID">
		<![CDATA[
			select WATER_MARK, ELE_MARK, GAS_MARK FROM np_pm_import_temp WHERE CONTROLUNITID = ?
		]]>
	</entry>
	
	
	<!-- å é¤éç¨ä¸ä¼ è¡¨ä¸­çåå²æ°æ® -->
	<entry key="SQL_DELETE_DATA_UP_TRACK">
		<![CDATA[
 			DELETE FROM NP_IM_DATA_UP_TRACK WHERE STATUS = 1 AND SYNC_TIME < DATE_ADD(NOW(),INTERVAL -1 MONTH)  
		]]>
	</entry>
	
	<!-- å é¤éç¨ä¸åè¡¨ä¸­çåå²æ°æ® -->
	<entry key="SQL_DELETE_DATA_DOWN_TRACK">
		<![CDATA[
 			DELETE FROM NP_IM_DATA_DOWN_TRACK WHERE STATUS = 1 AND SYNC_TIME < DATE_ADD(NOW(),INTERVAL -1 MONTH)  
		]]>
	</entry>
	
	<!-- æ ¹æ®æ¿é´ç»ç»IDæ¥æ¾å¯¹åºçäººåä¿¡æ¯ -->
	<entry key="QUERY_VOIP_PERSON_INFO">
		<![CDATA[
 			select card.id as CARD_ID
			from np_cd_card card inner JOIN np_sys_person person on person.id = card.person_id  
			INNER JOIN NP_CD_CARD_RLT_EQUIP cre on card.id = cre.card_id
			where person.id = ? and cre.equip_id = ? and cre.sync_flag = '1' limit 1
		]]>
	</entry>
	<!-- æ ¹æ®è®¾å¤ç±»åæ¥æ¾å¯¹åºçå­ç³»ç» -->
	<entry key="QUERY_SUBSYSTEM_INFO_BY_EQUIP">
		<![CDATA[
 			SELECT sub.code FROM np_eq_equipment equip INNER JOIN np_cf_subsystem sub on 
			equip.subsystem_id = sub.id where equip.id = ?
		]]>
	</entry>
	
	<!-- åå¥NP_PM_NOTEè¡¨ -->
	<entry key="SQL_INSERT_INTO_NP_PM_NOTE">
		<![CDATA[
 			INSERT INTO NP_PM_NOTE(ID,SUBJECT,NOTE_TYPE,NOTE_CONTENT,COME_FROM,CREATOR_ID,CREATE_TIME,STATUS,CONTROLUNITID,SEND_STRATEGY,PLAN_SEND_DATE)values(?,?,?,?,?,?,now(),?,?,?,now());
		]]>
	</entry>
	
	<!-- åå¥NP_PM_NOTE_LISTENERè¡¨ -->
	<entry key="SQL_INSERT_INTO_NP_PM_NOTE_LISTENER">
		<![CDATA[
			INSERT INTO np_pm_note_listener(ID, NOTE_ID,LISTENER_TYPE,LISTENER_ID,LISTENER_LEVEL) VALUES(?,?,?,?,?)		
		]]>
	</entry>
	<!-- æ ¹æ®CARD_IDæ¥æ¾å¯¹åºçé²åºåæ§å¶åå -->
	<entry key="SQL_QUERY_CONTROL_AND_AREA_BY_CARDID">
		<![CDATA[
		select sys1.CONTROLUNITID, sys1.AREA_ID from np_cd_card card1 inner join np_cf_subsystem sys1
		on card1.SUBSYSTEM_ID = sys1.ID
		where card1.ID = ?
		]]>
	</entry>
	
	<entry key="VISITOR_TC_PERMISSION_INSERT">
		<![CDATA[
 			INSERT INTO NP_DT_VISITER_TC_PERMISSION(ID, CARD_TYPE_VALUE, PARK_PERMISSION, SUBSYSTEM_ID, VISITOR_TYPE) VALUES(?,?,?,?,?)
		]]>
	</entry>
	
	<entry key="VISITOR_TC_PERMISSION_UPDATE">
		<![CDATA[
 			UPDATE NP_DT_VISITER_TC_PERMISSION SET PARK_PERMISSION = ? WHERE ID = ?
		]]>
	</entry>
	
	<entry key="VISITOR_TC_PERMISSION_QUERY">
		<![CDATA[
 			SELECT ID AS NISSP_ID FROM NP_DT_VISITER_TC_PERMISSION WHERE ID = ?
		]]>
	</entry>
	
	<!-- æ ¹æ®äººåIDæ¥æ¾å¯¹åºçCARD_ID,å¹¶ä¸è¿æ»¤åºå¨åºåçCARD_ID -->
	<entry key="SQL_QUERY_CARD_ID_BY">
		<![CDATA[
 			SELECT card.ID as ID FROM np_cd_card card WHERE card.PERSON_ID = ?
		]]>
	</entry>
	
	<!-- å¤æ­CARD_IDæ¯å¦å¯¹åºåºåè½¦è¾è®°å½ -->
	<entry key="SQL_QUERY_EXIST_CARD_ID_IN_PARK">
		<![CDATA[
 			SELECT card.ID FROM np_dt_park_stay card WHERE card_id  = ?
		]]>
	</entry>
	
	<!-- æ¥è¯¢éè¦ä¸åçåºåä¿¡æ¯ -->
	<entry key="SQL_QUERY_AREA_DOWN_DATA">
		<![CDATA[
 			select 
	 			area.ID as itemId,
	 			area.AREA_CODE as code, 
	 			area.AREA_NAME as name,
	 			area.AREA_TYPE as type,
				CASE when area.STATUS = 'DELETED' then 'true' else 'false'  end as isDeleted,
				CASE WHEN area.PARENT_ID = ncs.AREA_ID then '' else area.PARENT_ID end as parentId,
				ncs.code as subsystemCode
				from middle_sync_common_data_down down 
				INNER JOIN np_eq_area area
				on down.RECORD_ID  = area.ID 
				inner JOIN np_cf_subsystem ncs
				on area.CONTROLUNITID = ncs.CONTROLUNITID
				where down.COMMAND_ID = 'md.base.data.organize' 
				and down.SYNC_FLAG <> 1  
			limit 100
		]]>
	</entry>
	
	<!-- æ¥è¯¢éè¦ä¸åçåºåç¶èç¹ä¿¡æ¯ -->
	<entry key="SQL_QUERY_AREA_PARENT_DOWN_DATA">
		<![CDATA[
 			select 
	 			area.ID as itemId,
	 			area.AREA_CODE as code, 
	 			area.AREA_NAME as name,
	 			area.AREA_TYPE as type,
				CASE when area.STATUS = 'DELETED' then 'true' else 'false'  end as isDeleted,
				CASE WHEN area.PARENT_ID = ncs.AREA_ID then '' else area.PARENT_ID end as parentId,
				ncs.code as subsystemCode
				from middle_sync_common_data_down down 
				INNER JOIN np_eq_area area
				on down.RECORD_ID  = area.ID 
				inner JOIN np_cf_subsystem ncs
				on area.CONTROLUNITID = ncs.CONTROLUNITID
				where down.COMMAND_ID = 'md.base.data.organize' 
				and down.SYNC_FLAG <> 1 
				and area.id = ?
			limit 100
		]]>
	</entry>
	
	<!-- æ¥è¯¢éè¦ä¸åçäººåä¿¡æ¯ä¿¡æ¯ -->
	<entry key="SQL_QUERY_PERSON_DOWN_DATA">
		<![CDATA[
 			select per.ID as itemId,per.PERSON_CODE as code, per.PERSON_NAME as name,per.PERSON_TYPE as type,'false' as isOperator,
			per.CARD_TYPE as idCardType,per.CARD_NO as idCardNo, per.SEX as sex, per.AGE as age,per.NATIVE_PLACE AS nativePlace,per.TELEPHONE as telephone,
			per.OFFICE_TEL as officeTel, per.ADDRESS as address, per.EMAIL as email,
			CASE when per.STATUS = 'DELETED' then 'true' else 'false'  end as isDeleted,per.CONTROLUNITID
			from middle_sync_common_data_down down INNER JOIN np_sys_person per
			on down.RECORD_ID  =  per.ID where down.COMMAND_ID = 'md.base.data.person' 
			and down.SYNC_FLAG <> 1 limit 500
		]]>
	</entry>
	
	<!-- æ¥è¯¢éè¦ä¸åçäººåé²åºå³ç³»ä¿¡æ¯ -->
	<entry key="SQL_QUERY_PERSON_R_PERSON_DOWN_DATA">
		<![CDATA[
 			select arp.ID as itemId, arp.PERSON_ID as personId, arp.AREA_ID as oganizeId,'false' as isDeleted,p.CONTROLUNITID
			from middle_sync_common_data_down down INNER JOIN np_eq_area_r_person arp on down.RECORD_ID = arp.ID
			INNER JOIN np_sys_person p on arp.PERSON_ID = p.ID
			where down.COMMAND_ID = 'md.base.data.personoganize' and down.SYNC_FLAG <> 1 limit 500
		]]>
	</entry>
	
	<!-- æ´æ°ä¸åè¡¨ä¸­è®°å½çæ è¯ä½SYNC_FLAGåSEND_TIME -->
	<entry key="SQL_DOWN_DATA_SEND_TIME_UPDATE">
		<![CDATA[
 			UPDATE middle_sync_common_data_down SET SEND_TIME = {fn NOW()}, SYNC_FLAG = ?  WHERE RECORD_ID=?
		]]>
	</entry>
	
	<!-- æ´æ°ä¸åè¡¨ä¸­è®°å½çæ è¯ä½SYNC_FLAGåSEND_TIME -->
	<entry key="SQL_DOWN_DATA_SUCCESS_UPDATE">
		<![CDATA[
 			UPDATE middle_sync_common_data_down SET SYNC_FLAG = ?  WHERE RECORD_ID=? AND SYNC_FLAG = 2
		]]>
	</entry>
	
	<!-- æ ¹æ®æ§å¶ååæ¥æ¾å¯¹åºçå­ç³»ç»ä¿¡æ¯ -->
	<entry key="SQL_QUERY_SUB_CODE_BY_CONTROLUNIT">
		<![CDATA[
 			select CODE AS SUBSYSTEM_CODE from np_cf_subsystem where CONTROLUNITID = ?;
		]]>
	</entry>
	
	<!-- é»ååä¸å¡å¤ç -->
	<!-- æ ¹æ®å­ç³»ç»IDæ¥æ¾å¯¹åºçå­ç³»ç»ç¼å·-->
	<entry key="QUERY_SUBSYSTEM_CODE_BY_ID">
		<![CDATA[
 			select * FROM NP_CF_SUBSYSTEM WHERE ID = ? AND STATUS = 'NORMAL';
		]]>
	</entry>
	<!-- æ¥æ¶äºæå¡é»ååæ°å¢è¯·æ±ä¸åï¼ä¿å­å¨æ°æ®åºä¸­ -->
	<entry key="SQL_INSERT_BLACK_LIST">
		<![CDATA[
 			INSERT INTO NP_DT_PARK_BLACKLIST(ID,SUBSYSTEM_ID,CAR_NO,OPERATOR,OPERATE_TIME,REMARK,BEGIN_DATE,END_DATE,TYPE,STATUS)
 			VALUES(?, ?, ?, ?, NOW(), ?, ?, ?, ?, ?)
		]]>
	</entry>
	<!-- æ¥æ¶äºæå¡é»ååæ°å¢è¯·æ±ä¸åï¼æ´æ°é»ç½ååè®°å½-->
	<entry key="SQL_UPDATE_BLACK_LIST">
		<![CDATA[
 			UPDATE NP_DT_PARK_BLACKLIST SET BEGIN_DATE = ?, END_DATE = ?, STATUS = ?,TYPE = ?, SYNC_FLAG = ?,CAR_NO=? WHERE ID = ?
		]]>
	</entry>
	
	<!-- æ¥æ¶äºæå¡é»ååæ°å¢è¯·æ±ä¸åï¼æ´æ°é»ç½ååè®°å½-->
	<entry key="SQL_DELETE_BLACK_LIST">
		<![CDATA[
 			UPDATE NP_DT_PARK_BLACKLIST SET STATUS = ?, SYNC_FLAG = ? WHERE ID = ?
		]]>
	</entry>
	
	<!-- åéåæ´æ°åéæ è¯-->
	<entry key="SQL_BACK_UPDATE_BLACK_LIST">
		<![CDATA[
 			UPDATE NP_DT_PARK_BLACKLIST SET SYNC_FLAG = ?,SEND_TIME = NOW() WHERE ID = ?
		]]>
	</entry>
	<!-- ååºæåï¼ä¿®æ¹æ è¯ä½ -->
	<entry key="SQL_SUCCESS_UPDATE_BLACK_LIST">
		<![CDATA[
 			UPDATE NP_DT_PARK_BLACKLIST SET SYNC_FLAG = ?,SEND_TIME = NOW() WHERE ID = ? AND SYNC_FLAG = 2 and STATUS = 'NORMAL'
		]]>
	</entry>
	<!-- ååºæåï¼å é¤å·²ç»æ¯å é¤ç¶æçé»ç½ååè®°å½ -->
	<entry key="SQL_SUCCESS_DELETE_BLACK_LIST">
		<![CDATA[
 			DELETE FROM NP_DT_PARK_BLACKLIST  WHERE  ID = ? AND STATUS = 'DELETED'
		]]>
	</entry>
	<!-- å¤æ­æ¯å¦å·²æé»ç½ååå¨æ°æ®åº -->
	<entry key="SQL_QUERY_EXIST_BLACK_LIST">
		<![CDATA[
			SELECT * FROM NP_DT_PARK_BLACKLIST WHERE SUBSYSTEM_ID = ? AND CAR_NO = ?
		]]>
	</entry>
	
	<!-- å¤æ­æ¯å¦å·²æé»ç½ååå¨æ°æ®åº -->
	<entry key="SQL_QUERY_DOWN_BLACK_LIST">
		<![CDATA[
			SELECT BLACK.ID AS itemId, BLACK.CAR_NO AS carNo, BLACK.TYPE AS type, DATE_FORMAT(BLACK.BEGIN_DATE,'%Y-%m-%d') AS beginDate, DATE_FORMAT(BLACK.END_DATE,'%Y-%m-%d') AS endDate,
			CASE WHEN BLACK.STATUS = 'NORMAL' THEN false else true END AS isDeleted,SUB.CODE AS systemCode
			FROM NP_DT_PARK_BLACKLIST BLACK
			INNER JOIN NP_CF_SUBSYSTEM SUB ON BLACK.SUBSYSTEM_ID = SUB.ID
 			WHERE (SYNC_FLAG = 0 OR (SYNC_FLAG = 2 AND SEND_TIME > DATE_ADD(OPERATE_TIME,INTERVAL 5 MINUTE)))
		]]>
	</entry>
	
	<!-- ä»ä¸åè¡¨ä¸­æ¥æ¾itemIdå¯¹åºçå»¶æè®°å½ -->
	<entry key="SQL_QUERY_EXIST_DEFER_DOWN_LIST">
		<![CDATA[
			SELECT DOWN_CONTENT FROM np_im_data_down_track WHERE ID = ? AND DOWN_TYPE = ? AND STATUS = 0
		]]>
	</entry>
	
	<!-- æ ¹æ®å­ç³»ç»IDæ¥æ¾å¯¹åºçè½¦åºä¿¡æ¯ -->
	<entry key="QUERY_PARK_INFO_BY_SYSTEM">
		<![CDATA[
 			SELECT CODE AS PARK_CODE,NAME AS PARK_NAME FROM NP_EQ_PARK WHERE SUBSYSTEM_ID = ? and STATUS = 'NORMAL'
		]]>
	</entry>
	
	<!-- æ¥è¯¢å¥åºè®°å½-->
	<entry key="QUERY_PARK_IN_RECORD">
		<![CDATA[
 			select parkIn.CAR_NUMBER AS CAR_NO, parkIn.IN_TIME, DIC.ITEM_NAME AS IN_EVENT_TYPE,parkIn.IN_EQUIP_NAME,
			parkIn.IN_OPERATOR,card.PHYSICAL_NO AS CARD_NO,cardType.CARD_TYPE_NAME AS CARD_TYPE,parkIn.CARD_ID 
			from np_dt_park_in parkIn
			LEFT JOIN np_cd_card card on parkIn.CARD_ID = card.ID
			LEFT JOIN NP_SYS_DICTIONARY DIC ON parkIn.EVENT_TYPE = DIC.ITEM_CODE  AND DIC.TYPE_CODE = 'D060'
			LEFT JOIN np_cf_subsystem_card_type cardType on cardType.ID = parkIn.CARD_TYPE
			WHERE parkIn.SUBSYSTEM_ID = ? AND parkIn.IN_TIME > ? AND parkIn.IN_TIME < ? 
		]]>
	</entry>
	
	<!-- æ¥è¯¢åºåºè®°å½-->
	<entry key="QUERY_PARK_OUT_RECORD">
		<![CDATA[
 			select CARD_ID, IN_TIME from np_dt_park_stay where SUBSYSTEM_ID = ? AND IN_TIME > ?
		]]>
	</entry>
	
	<!-- æ ¹æ®é²åºæ¥æ¾å¯¹åºçå­ç³»ç»ä¿¡æ¯-->
	<entry key="QUERY_SUBSYSTEM_INFO_BY_AREA">
		<![CDATA[
 			select sub.ID,area.AREA_CODE,area.AREA_NAME from np_eq_area area
			LEFT JOIN np_cf_subsystem sub on area.ID = sub.AREA_ID
			where area.ID = ?;
		]]>
	</entry>
	<!-- æ ¹æ®å¡ä¿¡æ¯æ¥æ¾é¨ç¦åºå¥è®°å½-->
	<entry key="QUERY_DOOR_INOUT_API">
		<![CDATA[
 			select DATE_FORMAT(DOOR.OPEN_TIME, '%Y-%m-%d %H:%i:%s') AS INOUT_TIME,EQUIP.EQUIP_NAME,PERSON.PERSON_CODE,PERSON.PERSON_NAME,DIC.ITEM_NAME AS TYPE_NAME,
 			DATE_FORMAT(DOOR.CREATE_TIME , '%Y-%m-%d %H:%i:%s') AS CREATE_TIME
			from np_dt_door_inout DOOR  
			LEFT JOIN np_cd_card card on DOOR.CARD_ID = card.ID
			LEFT JOIN np_sys_person PERSON ON card.PERSON_ID = PERSON.ID 
			LEFT JOIN np_eq_equipment EQUIP ON DOOR.EQUIP_ID = EQUIP.ID
			LEFT JOIN NP_SYS_DICTIONARY DIC ON DOOR.OPEN_MODE = DIC.ITEM_CODE  AND DIC.TYPE_CODE = 'D013'
			WHERE DOOR.SUBSYSTEM_ID = ?
		]]>
	</entry>
	<entry key="QUERY_DOOR_INOUT_VISITOR_API">
		<![CDATA[
 			select DATE_FORMAT(DOOR.OPEN_TIME, '%Y-%m-%d %H:%i:%s') AS INOUT_TIME,invite.VISITER_NAME as VISITOR_NAME,invite.VISITER_TEL AS VISITOR_TEL,EQUIP.EQUIP_NAME,DIC.ITEM_NAME AS TYPE_NAME, 
 			DATE_FORMAT(DOOR.CREATE_TIME , '%Y-%m-%d %H:%i:%s') AS CREATE_TIME
 			from np_dt_door_inout DOOR 
			INNER JOIN np_cd_card card on DOOR.CARD_ID = card.ID
			INNER JOIN np_dt_visiter_invite_detail invite ON card.ID = invite.CARD_ID
			INNER JOIN np_eq_equipment EQUIP ON DOOR.EQUIP_ID = EQUIP.ID
			INNER JOIN NP_SYS_DICTIONARY DIC ON DOOR.OPEN_MODE = DIC.ITEM_CODE  AND DIC.TYPE_CODE = 'D013'
			WHERE DOOR.SUBSYSTEM_ID = ?
		]]>
	</entry>
	<entry key="QUERY_SUBSYSTEM_CARDID_BY_CARNO">
		<![CDATA[
 			SELECT NPC.CARD_ID AS ID FROM NP_CF_SUBSYSTEM CS
			INNER JOIN NP_DT_PARK_CAR NP ON CS.CONTROLUNITID = NP.CONTROLUNITID
			INNER JOIN NP_DT_PARK_CAR_R_CARD NPC ON NP.ID = NPC.CAR_ID
			WHERE CS.ID = ?
			AND NP.CAR_NO = ?
			AND CS.STATUS = 'NORMAL'
			LIMIT 1
		]]>
	</entry>
	<entry key="SQL_QUERY_MULTI_CARD_AUTHOR_LIST">
		<![CDATA[
			SELECT AUTH.ID AS ID,AUTH.SERVICE_AUTH_ID AS SERVICE_ID,SERVICE.CARD_TYPE AS CARD_TYPE,
			DATE_FORMAT(SERVICE.BEGIN_TIME ,'%Y-%m-%d') AS BEGIN_DATE,
			DATE_FORMAT(SERVICE.END_TIME ,'%Y-%m-%d') AS END_DATE,
			AUTH.CARD_ID AS CARD_ID,
			CASE WHEN AUTH.DEL_STATUS =1 THEN 'DELETED' ELSE 'NORMAL' END AS STATUS,
			SERVICE.SUBSYSTEM_ID AS SUBSYSTEM_ID,
			SERVICETYPE.SERVICE_CODE AS SERVICE_TYPE,
			TYPE.CARD_TYPE_NAME AS CARD_TYPE_NAME,
			TYPE.CARD_TYPE_CODE AS NP_CARD_TYPE,
			CAR.CAR_NO AS VEHICLE_NO
			FROM np_cd_card_rel_service_author AUTH force index(primary)
			LEFT JOIN np_cd_card_subsystem_author SERVICE ON AUTH.SERVICE_AUTH_ID = SERVICE.ID
			LEFT JOIN np_cf_service SERVICETYPE ON SERVICE.SERVICE_ID = SERVICETYPE.ID
			LEFT JOIN NP_CF_SUBSYSTEM_CARD_TYPE TYPE ON SERVICE.CARD_TYPE = TYPE.ID
			LEFT JOIN NP_DT_PARK_CAR_R_CARD REL ON REL.CARD_ID = AUTH.CARD_ID
			LEFT JOIN NP_DT_PARK_CAR CAR ON REL.CAR_ID = CAR.ID
			WHERE AUTH.SYNC_FLAG <> 1 AND AUTH.SEND_TIME < ADDTIME(NOW(),'-0:1:0') AND TYPE.CARD_TYPE_CODE IS NOT NULL LIMIT 500
		]]>
	</entry>
		
	<entry key="QUERY_TRUST_STATUS">
		<![CDATA[
 			SELECT CURRENT_STATUS AS STATUS FROM np_md_mandate_event WHERE CURRENT_STATUS = 'HANDLED' and  EQUIP_ID = ? LIMIT 1
		]]>
	</entry>
	
	<entry key="SQL_QUERY_PARK_PLACE_STAT">
		<![CDATA[
			SELECT COUNT(1) as count FROM np_eq_park_seat where subsystem_id = ? and status = '0'
		]]>
	</entry>
	
	<entry key="SQL_QUERY_PARK_INFO_BY_CODE">
		<![CDATA[
			SELECT SUBSYSTEM_ID AS ID, CODE AS PARK_CODE, NAME AS PARK_NAME FROM np_eq_park WHERE CODE = ?
		]]>
	</entry>
	
	<!-- æ ¹æ®å¡IDæ¥æ¾å¯¹åºæå¡çç»ææ¶é´ -->
	<entry key="SQL_QUERY_SERVICE_END_TIME_BY_CARD_ID">
		<![CDATA[
			select END_TIME from np_cd_card_subsystem_author A
			INNER JOIN np_cf_service S ON A.SERVICE_ID = S.ID 
			where CARD_ID = ? AND S.SERVICE_CODE = ?
		]]>
	</entry>
	
	<entry key="SQL_QUERY_EQUIP_BY_CARD_ID">
		<![CDATA[
			select DISTINCT(e.EQUIP_CODE) from np_cd_card c 
			INNER JOIN np_cd_card_rlt_equip cre on c.ID = cre.CARD_ID and cre.DELETED_FLAG = 0
			INNER JOIN np_eq_equipment e on cre.EQUIP_ID = e.ID and e.STATUS = 'NORMAL'
			INNER JOIN np_eq_equipment_type t on e.EQUIP_TYPE_ID = t.ID
			where c.ID = ? and t.TYPE_CODE = '0208'
		]]>
	</entry>
	<entry key="SQL_QUERY_CARD_AUTHOR_LIST_NEW">
		<![CDATA[
			SELECT
                DISTINCT AUTH.ID AS ID,
                SERVICE.SERVICE_CODE AS SERVICE_TYPE,
                AUTH.CARD_TYPE AS CARD_TYPE_ID,
				NRP.PERSON_ID AS PERSON_ID,
                CASE WHEN AUTH.BEGIN_TIME IS NULL THEN ' '
                ELSE DATE_FORMAT(AUTH.BEGIN_TIME ,'%Y-%m-%d') END AS START_TIME,
                CASE WHEN AUTH.END_TIME IS NULL THEN ' '
                ELSE DATE_FORMAT(AUTH.END_TIME ,'%Y-%m-%d') END AS END_TIME,
                AUTH.CARD_ID AS CARD_ID,
				AUTH.LOCATION_TYPE AS LOCATION_TYPE,
				AUTH.LOCATION_NO AS LOCATION_NO,
				AUTH.LOCATION_COUNT AS LOCATION_COUNT,
				AUTH.ISSUE_MONEY AS SERVICE_MONEY,
				CASE WHEN AUTH.SERVICE_CODE IS NULL THEN ' '
				ELSE AUTH.SERVICE_CODE
        		END AS SERVICE_CODE,
                AUTH.STATE AS STATUS,
                AUTH.SUBSYSTEM_ID AS SUBSYSTEM_ID
             FROM NP_CD_CARD_SUBSYSTEM_AUTHOR AUTH
             INNER JOIN np_cd_person_rel_service_author NRP on AUTH.id = NRP.SERVICE_AUTH_ID
             LEFT JOIN NP_CF_SERVICE SERVICE ON AUTH.SERVICE_ID = SERVICE.ID
             WHERE AUTH.SYNC_FLAG <> 1 AND AUTH.SEND_TIME < ADDTIME(NOW(),'-0:1:0')
             LIMIT 500
		]]>
	</entry>
	
	<entry key="SQL_QUERY_PARK_CAR_LIST">
		<![CDATA[
			SELECT  
		    	CAR.ID AS ID,
				CAR.CAR_NO AS CAR_NO,
				CAR.PERSON_ID AS PERSON_ID,
				CAR.CAR_DETAIL AS CAR_DETAIL,
				CAR.CAR_COLOR AS CAR_COLOR,
				CAR.REMARK AS REMARK,
				SUB.ID AS SUBSYSTEM_ID,
				CASE WHEN CAR.STATUS IS NULL THEN 'NORMAL'
				ELSE CAR.STATUS
        		END AS STATUS
			FROM NP_DT_PARK_CAR CAR
			INNER JOIN NP_CF_SUBSYSTEM SUB ON CAR.CONTROLUNITID = SUB.CONTROLUNITID			
			WHERE CAR.PERSON_ID IS NOT NULL AND CAR.SYNC_FLAG=0 LIMIT 1000
		]]>
	</entry>
	
	<entry key="SQL_RESEND_PARK_CAR_RESEND_LIST">
		<![CDATA[
			SELECT  
				CAR.ID AS ID,
				CAR.CAR_NO AS CAR_NO,
				CAR.PERSON_ID AS PERSON_ID,
				CAR.CAR_DETAIL AS CAR_DETAIL,
				CAR.CAR_COLOR AS CAR_COLOR,
				CAR.REMARK AS REMARK,
				SUB.ID AS SUBSYSTEM_ID,
				CASE WHEN CAR.STATUS IS NULL THEN 'NORMAL'
				ELSE CAR.STATUS
        		END AS STATUS,
				'FALSE' AS IS_ADD
			FROM MIDDLE_SYNC_COMMON_DATA SYNC
			INNER JOIN NP_DT_PARK_CAR CAR ON SYNC.RECORD_ID = CAR.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_CAR_R_PERSON' 
			INNER JOIN NP_CF_SUBSYSTEM SUB ON CAR.CONTROLUNITID = SUB.CONTROLUNITID 	
			AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:0:10') AND SYNC.SYNC_FLAG = 0  AND CAR.PERSON_ID IS NOT NULL 
			LIMIT 1000
		]]>
	</entry>
	 
	<entry key="SQL_QUERY_MONTH_CARD_LIST">
		<![CDATA[
			SELECT  
		        MS.ID AS ID,
				MS.CARD_TYPE_ID AS CARD_TYPE_ID,
				MS.MONTH_PERIOD AS MONTH_PERIOD,
				MS.PERIOD_MONEY AS PERIOD_MONEY,
				SUB.ID AS SUBSYSTEM_ID,
				TYPE.NP_CARD_TYPE AS NP_CARD_TYPE_NAME,
				TYPE.CARD_TYPE_NAME AS CARD_TYPE_NAME,
				TYPE.STATUS AS CARD_TYPE_STATUS,
				CASE WHEN MS.STATUS IS NULL THEN 'NORMAL'
				ELSE MS.STATUS
        		END AS STATUS,
				MS.REMARK AS REMARK,
			    'TRUE' AS IS_ADD
			FROM np_cf_subsystem_mcard_standard MS
			INNER JOIN np_eq_park_standard STANDARD ON MS.STANDARD_ID = STANDARD.ID
			INNER JOIN np_eq_park PARK ON PARK.ID = STANDARD.PARK_ID
			INNER JOIN NP_CF_SUBSYSTEM SUB ON SUB.ID = PARK.SUBSYSTEM_ID 
			LEFT JOIN np_cf_subsystem_card_type TYPE ON TYPE.ID = MS.CARD_TYPE_ID
			WHERE MS.SYNC_FLAG=0 
			LIMIT 1000
		]]>
	</entry>
	
	<entry key="SQL_RESEND_MONTH_CARD_RESEND_LIST">
		<![CDATA[
			SELECT  
				MS.ID AS ID,
				MS.CARD_TYPE_ID AS CARD_TYPE_ID,
				MS.MONTH_PERIOD AS MONTH_PERIOD,
				MS.PERIOD_MONEY AS PERIOD_MONEY,
				SUB.ID AS SUBSYSTEM_ID,
				CASE WHEN MS.STATUS IS NULL THEN 'NORMAL'
				ELSE MS.STATUS
        		END AS STATUS,
				MS.REMARK AS REMARK,
				'FALSE' AS IS_ADD
			FROM MIDDLE_SYNC_COMMON_DATA SYNC
			INNER JOIN np_cf_subsystem_mcard_standard MS ON SYNC.RECORD_ID = MS.ID AND SYNC.COMMAND_ID = 'NISSP_JSPAY_CHARGE_STANDARD' 
			INNER JOIN np_eq_park_standard STANDARD ON MS.STANDARD_ID = STANDARD.ID
			INNER JOIN np_eq_park PARK ON PARK.ID = STANDARD.PARK_ID
			INNER JOIN NP_CF_SUBSYSTEM SUB ON SUB.ID = PARK.SUBSYSTEM_ID 	
			AND SYNC.SEND_TIME < ADDTIME(NOW(),'-0:0:10') AND SYNC.SYNC_FLAG = 0
			LIMIT 1000
		]]>
	</entry>
	
	<entry key="SQL_QUERY_PERSON_R_EQUIP_LIST">
		<![CDATA[
			SELECT ID ,PERSON_ID,EQUIPMENT_ID AS EQUIP_ID,CASE WHEN DELETED_FLAG=1 THEN 'DELETED' ELSE 'NORMAL' END AS STATUS
			FROM np_sys_person_r_equip
			WHERE SYNC_FLAG = 0 or (SYNC_FLAG = 2 AND SEND_TIME < ADDTIME(NOW(),'-0:1:0')) limit 500
		]]>
	</entry>
	
	<entry key="SQL_UPDATE_PERSON_R_EQUIP_LIST">
		<![CDATA[
			UPDATE np_sys_person_r_equip SET SYNC_FLAG = ?, SEND_TIME = {fn NOW()} WHERE ID = ? and SYNC_FLAG = 2
		]]>
	</entry>
	
	<entry key="SQL_DELETE_PERSON_R_EQUIP_LIST">
		<![CDATA[
			DELETE FROM np_sys_person_r_equip WHERE ID = ? and SYNC_FLAG = 2
		]]>
	</entry>
	
	<entry key="SQL_DELETE_KAFKA_SUCCESS_DATA">
		<![CDATA[
 			DELETE FROM NP_DT_KAFKA_FAIL WHERE SYNC_FLAG = 1 AND SEND_TIME < DATE_ADD(NOW(),INTERVAL -1 MONTH)  
		]]>
	</entry>
	
</properties>
